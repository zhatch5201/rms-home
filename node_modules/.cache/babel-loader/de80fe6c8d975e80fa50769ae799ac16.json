{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeenyStatistics = exports.TeenyStatisticsWarning = void 0;\n/**\n * @class TeenyStatisticsWarning\n * @extends Error\n * @description While an error, is used for emitting warnings when\n *   meeting certain configured thresholds.\n * @see process.emitWarning\n */\n\nvar TeenyStatisticsWarning = /*#__PURE__*/function (_Error) {\n  _inherits(TeenyStatisticsWarning, _Error);\n\n  var _super = _createSuper(TeenyStatisticsWarning);\n\n  /**\n   * @param {string} message\n   */\n  function TeenyStatisticsWarning(message) {\n    var _this;\n\n    _classCallCheck(this, TeenyStatisticsWarning);\n\n    _this = _super.call(this, message);\n    _this.threshold = 0;\n    _this.type = '';\n    _this.value = 0;\n    _this.name = _this.constructor.name;\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return TeenyStatisticsWarning;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.TeenyStatisticsWarning = TeenyStatisticsWarning;\nTeenyStatisticsWarning.CONCURRENT_REQUESTS = 'ConcurrentRequestsExceededWarning';\n/**\n * @class TeenyStatistics\n * @description Maintain various statistics internal to teeny-request. Tracking\n *   is not automatic and must be instrumented within teeny-request.\n */\n\nvar TeenyStatistics = /*#__PURE__*/function () {\n  /**\n   * @param {TeenyStatisticsOptions} [opts]\n   */\n  function TeenyStatistics(opts) {\n    _classCallCheck(this, TeenyStatistics);\n\n    /**\n     * @type {number}\n     * @private\n     * @default 0\n     */\n    this._concurrentRequests = 0;\n    /**\n     * @type {boolean}\n     * @private\n     * @default false\n     */\n\n    this._didConcurrentRequestWarn = false;\n    this._options = TeenyStatistics._prepareOptions(opts);\n  }\n  /**\n   * Returns a copy of the current options.\n   * @return {TeenyStatisticsOptions}\n   */\n\n\n  _createClass(TeenyStatistics, [{\n    key: \"getOptions\",\n    value: function getOptions() {\n      return Object.assign({}, this._options);\n    }\n    /**\n     * Change configured statistics options. This will not preserve unspecified\n     *   options that were previously specified, i.e. this is a reset of options.\n     * @param {TeenyStatisticsOptions} [opts]\n     * @returns {TeenyStatisticsConfig} The previous options.\n     * @see _prepareOptions\n     */\n\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opts) {\n      var oldOpts = this._options;\n      this._options = TeenyStatistics._prepareOptions(opts);\n      return oldOpts;\n    }\n    /**\n     * @readonly\n     * @return {TeenyStatisticsCounters}\n     */\n\n  }, {\n    key: \"counters\",\n    get: function get() {\n      return {\n        concurrentRequests: this._concurrentRequests\n      };\n    }\n    /**\n     * @description Should call this right before making a request.\n     */\n\n  }, {\n    key: \"requestStarting\",\n    value: function requestStarting() {\n      this._concurrentRequests++;\n\n      if (this._options.concurrentRequests > 0 && this._concurrentRequests >= this._options.concurrentRequests && !this._didConcurrentRequestWarn) {\n        this._didConcurrentRequestWarn = true;\n        var warning = new TeenyStatisticsWarning('Possible excessive concurrent requests detected. ' + this._concurrentRequests + ' requests in-flight, which exceeds the configured threshold of ' + this._options.concurrentRequests + '. Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment ' + 'variable or the concurrentRequests option of teeny-request to ' + 'increase or disable (0) this warning.');\n        warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;\n        warning.value = this._concurrentRequests;\n        warning.threshold = this._options.concurrentRequests;\n        process.emitWarning(warning);\n      }\n    }\n    /**\n     * @description When using `requestStarting`, call this after the request\n     *   has finished.\n     */\n\n  }, {\n    key: \"requestFinished\",\n    value: function requestFinished() {\n      // TODO negative?\n      this._concurrentRequests--;\n    }\n    /**\n     * Configuration Precedence:\n     *   1. Dependency inversion via defined option.\n     *   2. Global numeric environment variable.\n     *   3. Built-in default.\n     * This will not preserve unspecified options previously specified.\n     * @param {TeenyStatisticsOptions} [opts]\n     * @returns {TeenyStatisticsOptions}\n     * @private\n     */\n\n  }], [{\n    key: \"_prepareOptions\",\n    value: function _prepareOptions() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          diConcurrentRequests = _ref.concurrentRequests;\n\n      var concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;\n      var envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);\n\n      if (diConcurrentRequests !== undefined) {\n        concurrentRequests = diConcurrentRequests;\n      } else if (!Number.isNaN(envConcurrentRequests)) {\n        concurrentRequests = envConcurrentRequests;\n      }\n\n      return {\n        concurrentRequests: concurrentRequests\n      };\n    }\n  }]);\n\n  return TeenyStatistics;\n}();\n\nexports.TeenyStatistics = TeenyStatistics;\n/**\n * @description A default threshold representing when to warn about excessive\n *   in-flight/concurrent requests.\n * @type {number}\n * @static\n * @readonly\n * @default 5000\n */\n\nTeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5000;","map":{"version":3,"sources":["../../src/TeenyStatistics.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;AAuBH;;;;;;AAMG;;IACU,sB;;;;;AAOX;;AAEG;AACH,kCAAY,OAAZ,EAA2B;AAAA;;AAAA;;AACzB,8BAAM,OAAN;AARK,UAAA,SAAA,GAAY,CAAZ;AACA,UAAA,IAAA,GAAO,EAAP;AACA,UAAA,KAAA,GAAQ,CAAR;AAOL,UAAK,IAAL,GAAY,MAAK,WAAL,CAAiB,IAA7B;AACA,IAAA,KAAK,CAAC,iBAAN,gCAA8B,MAAK,WAAnC;AAHyB;AAI1B;;;iCAdyC,K;;AAA5C,OAAA,CAAA,sBAAA,GAAA,sBAAA;AACkB,sBAAA,CAAA,mBAAA,GAAsB,mCAAtB;AAgBlB;;;;AAIG;;IACU,e;AA+BX;;AAEG;AACH,2BAAY,IAAZ,EAAyC;AAAA;;AAjBzC;;;;AAIG;AACK,SAAA,mBAAA,GAAsB,CAAtB;AAER;;;;AAIG;;AACK,SAAA,yBAAA,GAA4B,KAA5B;AAMN,SAAK,QAAL,GAAgB,eAAe,CAAC,eAAhB,CAAgC,IAAhC,CAAhB;AACD;AAED;;;AAGG;;;;;WACH,sBAAU;AACR,aAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,QAAvB,CAAP;AACD;AAED;;;;;;AAMG;;;;WACH,oBAAW,IAAX,EAAwC;AACtC,UAAM,OAAO,GAAG,KAAK,QAArB;AACA,WAAK,QAAL,GAAgB,eAAe,CAAC,eAAhB,CAAgC,IAAhC,CAAhB;AACA,aAAO,OAAP;AACD;AAED;;;AAGG;;;;SACH,eAAY;AACV,aAAO;AACL,QAAA,kBAAkB,EAAE,KAAK;AADpB,OAAP;AAGD;AAED;;AAEG;;;;WACH,2BAAe;AACb,WAAK,mBAAL;;AAEA,UACE,KAAK,QAAL,CAAc,kBAAd,GAAmC,CAAnC,IACA,KAAK,mBAAL,IAA4B,KAAK,QAAL,CAAc,kBAD1C,IAEA,CAAC,KAAK,yBAHR,EAIE;AACA,aAAK,yBAAL,GAAiC,IAAjC;AACA,YAAM,OAAO,GAAG,IAAI,sBAAJ,CACd,sDACE,KAAK,mBADP,GAEE,iEAFF,GAGE,KAAK,QAAL,CAAc,kBAHhB,GAIE,+DAJF,GAKE,gEALF,GAME,uCAPY,CAAhB;AASA,QAAA,OAAO,CAAC,IAAR,GAAe,sBAAsB,CAAC,mBAAtC;AACA,QAAA,OAAO,CAAC,KAAR,GAAgB,KAAK,mBAArB;AACA,QAAA,OAAO,CAAC,SAAR,GAAoB,KAAK,QAAL,CAAc,kBAAlC;AACA,QAAA,OAAO,CAAC,WAAR,CAAoB,OAApB;AACD;AACF;AAED;;;AAGG;;;;WACH,2BAAe;AACb;AACA,WAAK,mBAAL;AACD;AAED;;;;;;;;;AASG;;;;WACK,2BAEsB;AAAA,qFAAF,EAAE;AAAA,UADR,oBACQ,QAD5B,kBAC4B;;AAC5B,UAAI,kBAAkB,GAAG,KAAK,gCAA9B;AAEA,UAAM,qBAAqB,GAAG,MAAM,CAClC,OAAO,CAAC,GAAR,CAAY,sCADsB,CAApC;;AAGA,UAAI,oBAAoB,KAAK,SAA7B,EAAwC;AACtC,QAAA,kBAAkB,GAAG,oBAArB;AACD,OAFD,MAEO,IAAI,CAAC,MAAM,CAAC,KAAP,CAAa,qBAAb,CAAL,EAA0C;AAC/C,QAAA,kBAAkB,GAAG,qBAArB;AACD;;AAED,aAAO;AAAC,QAAA,kBAAkB,EAAlB;AAAD,OAAP;AACD;;;;;;AAnIH,OAAA,CAAA,eAAA,GAAA,eAAA;AACE;;;;;;;AAOG;;AACa,eAAA,CAAA,gCAAA,GAAmC,IAAnC","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TeenyStatistics = exports.TeenyStatisticsWarning = void 0;\n/**\n * @class TeenyStatisticsWarning\n * @extends Error\n * @description While an error, is used for emitting warnings when\n *   meeting certain configured thresholds.\n * @see process.emitWarning\n */\nclass TeenyStatisticsWarning extends Error {\n    /**\n     * @param {string} message\n     */\n    constructor(message) {\n        super(message);\n        this.threshold = 0;\n        this.type = '';\n        this.value = 0;\n        this.name = this.constructor.name;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nexports.TeenyStatisticsWarning = TeenyStatisticsWarning;\nTeenyStatisticsWarning.CONCURRENT_REQUESTS = 'ConcurrentRequestsExceededWarning';\n/**\n * @class TeenyStatistics\n * @description Maintain various statistics internal to teeny-request. Tracking\n *   is not automatic and must be instrumented within teeny-request.\n */\nclass TeenyStatistics {\n    /**\n     * @param {TeenyStatisticsOptions} [opts]\n     */\n    constructor(opts) {\n        /**\n         * @type {number}\n         * @private\n         * @default 0\n         */\n        this._concurrentRequests = 0;\n        /**\n         * @type {boolean}\n         * @private\n         * @default false\n         */\n        this._didConcurrentRequestWarn = false;\n        this._options = TeenyStatistics._prepareOptions(opts);\n    }\n    /**\n     * Returns a copy of the current options.\n     * @return {TeenyStatisticsOptions}\n     */\n    getOptions() {\n        return Object.assign({}, this._options);\n    }\n    /**\n     * Change configured statistics options. This will not preserve unspecified\n     *   options that were previously specified, i.e. this is a reset of options.\n     * @param {TeenyStatisticsOptions} [opts]\n     * @returns {TeenyStatisticsConfig} The previous options.\n     * @see _prepareOptions\n     */\n    setOptions(opts) {\n        const oldOpts = this._options;\n        this._options = TeenyStatistics._prepareOptions(opts);\n        return oldOpts;\n    }\n    /**\n     * @readonly\n     * @return {TeenyStatisticsCounters}\n     */\n    get counters() {\n        return {\n            concurrentRequests: this._concurrentRequests,\n        };\n    }\n    /**\n     * @description Should call this right before making a request.\n     */\n    requestStarting() {\n        this._concurrentRequests++;\n        if (this._options.concurrentRequests > 0 &&\n            this._concurrentRequests >= this._options.concurrentRequests &&\n            !this._didConcurrentRequestWarn) {\n            this._didConcurrentRequestWarn = true;\n            const warning = new TeenyStatisticsWarning('Possible excessive concurrent requests detected. ' +\n                this._concurrentRequests +\n                ' requests in-flight, which exceeds the configured threshold of ' +\n                this._options.concurrentRequests +\n                '. Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment ' +\n                'variable or the concurrentRequests option of teeny-request to ' +\n                'increase or disable (0) this warning.');\n            warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;\n            warning.value = this._concurrentRequests;\n            warning.threshold = this._options.concurrentRequests;\n            process.emitWarning(warning);\n        }\n    }\n    /**\n     * @description When using `requestStarting`, call this after the request\n     *   has finished.\n     */\n    requestFinished() {\n        // TODO negative?\n        this._concurrentRequests--;\n    }\n    /**\n     * Configuration Precedence:\n     *   1. Dependency inversion via defined option.\n     *   2. Global numeric environment variable.\n     *   3. Built-in default.\n     * This will not preserve unspecified options previously specified.\n     * @param {TeenyStatisticsOptions} [opts]\n     * @returns {TeenyStatisticsOptions}\n     * @private\n     */\n    static _prepareOptions({ concurrentRequests: diConcurrentRequests, } = {}) {\n        let concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;\n        const envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);\n        if (diConcurrentRequests !== undefined) {\n            concurrentRequests = diConcurrentRequests;\n        }\n        else if (!Number.isNaN(envConcurrentRequests)) {\n            concurrentRequests = envConcurrentRequests;\n        }\n        return { concurrentRequests };\n    }\n}\nexports.TeenyStatistics = TeenyStatistics;\n/**\n * @description A default threshold representing when to warn about excessive\n *   in-flight/concurrent requests.\n * @type {number}\n * @static\n * @readonly\n * @default 5000\n */\nTeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5000;\n//# sourceMappingURL=TeenyStatistics.js.map"]},"metadata":{},"sourceType":"script"}