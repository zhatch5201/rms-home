{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Iam = void 0;\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n\nvar arrify = require(\"arrify\");\n\nvar util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nvar Iam = /*#__PURE__*/function () {\n  function Iam(bucket) {\n    _classCallCheck(this, Iam);\n\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\n   * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n   * @property {number} [requestedPolicyVersion] The version of IAM policies to\n   *     request. If a policy with a condition is requested without setting\n   *     this, the server will return an error. This must be set to a value\n   *     of 3 to retrieve IAM policies containing conditions. This is to\n   *     prevent client code that isn't aware of IAM conditions from\n   *     interpreting and modifying policies incorrectly. The service might\n   *     return a policy with version lower than the one that was requested,\n   *     based on the feature syntax in the policy fetched.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @typedef {array} GetPolicyResponse\n   * @property {Policy} 0 The policy.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @typedef {object} Policy\n   * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n   * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n   * @property {number} [policy.version] The syntax schema version of the Policy.\n   *      To set an IAM policy with conditional binding, this field must be set to\n   *      3 or greater.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   */\n\n  /**\n   * @typedef {object} PolicyBinding\n   * @property {string} role Role that is assigned to members.\n   * @property {string[]} members Specifies the identities requesting access for the bucket.\n   * @property {Expr} [condition] The condition that is associated with this binding.\n   */\n\n  /**\n   * @typedef {object} Expr\n   * @property {string} [title] An optional title for the expression, i.e. a\n   *     short string describing its purpose. This can be used e.g. in UIs\n   *     which allow to enter the expression.\n   * @property {string} [description] An optional description of the\n   *     expression. This is a longer text which describes the expression,\n   *     e.g. when hovered over it in a UI.\n   * @property {string} expression Textual representation of an expression in\n   *     Common Expression Language syntax. The application context of the\n   *     containing message determines which well-known feature set of CEL\n   *     is supported.The condition that is associated with this binding.\n   *\n   * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n   */\n\n  /**\n   * Get the IAM policy.\n   *\n   * @param {GetPolicyOptions} [options] Request options.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * bucket.iam.getPolicy(\n   *     {requestedPolicyVersion: 3},\n   *     function(err, policy, apiResponse) {\n   *\n   *     },\n   * );\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n   *   .then(function(data) {\n   *     const policy = data[0];\n   *     const apiResponse = data[1];\n   *   });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_view_bucket_iam_members\n   * Example of retrieving a bucket's IAM policy:\n   */\n\n\n  _createClass(Iam, [{\n    key: \"getPolicy\",\n    value: function getPolicy(optionsOrCallback, callback) {\n      var _util_1$normalize = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize.options,\n          cb = _util_1$normalize.callback;\n\n      var qs = {};\n\n      if (options.userProject) {\n        qs.userProject = options.userProject;\n      }\n\n      if (options.requestedPolicyVersion !== null && options.requestedPolicyVersion !== undefined) {\n        qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n      }\n\n      this.request_({\n        uri: '/iam',\n        qs: qs\n      }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration opbject.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n\n  }, {\n    key: \"setPolicy\",\n    value: function setPolicy(policy, optionsOrCallback, callback) {\n      if (policy === null || typeof policy !== 'object') {\n        throw new Error('A policy object is required.');\n      }\n\n      var _util_1$normalize2 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize2.options,\n          cb = _util_1$normalize2.callback;\n\n      this.request_({\n        method: 'PUT',\n        uri: '/iam',\n        json: Object.assign({\n          resourceId: this.resourceId_\n        }, policy),\n        qs: options\n      }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"testPermissions\",\n    value: function testPermissions(permissions, optionsOrCallback, callback) {\n      if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n        throw new Error('Permissions are required.');\n      }\n\n      var _util_1$normalize3 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize3.options,\n          cb = _util_1$normalize3.callback;\n\n      var permissionsArray = arrify(permissions);\n      var req = Object.assign({\n        permissions: permissionsArray\n      }, options);\n      this.request_({\n        uri: '/iam/testPermissions',\n        qs: req,\n        useQuerystring: true\n      }, function (err, resp) {\n        if (err) {\n          cb(err, null, resp);\n          return;\n        }\n\n        var availablePermissions = arrify(resp.permissions);\n        var permissionsHash = permissionsArray.reduce(function (acc, permission) {\n          acc[permission] = availablePermissions.indexOf(permission) > -1;\n          return acc;\n        }, {});\n        cb(null, permissionsHash, resp);\n      });\n    }\n  }]);\n\n  return Iam;\n}();\n\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Iam);","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/storage/build/src/iam.js"],"names":["Object","defineProperty","exports","value","Iam","promisify_1","require","arrify","util_1","bucket","request_","request","bind","resourceId_","getId","optionsOrCallback","callback","normalize","options","cb","qs","userProject","requestedPolicyVersion","undefined","optionsRequestedPolicyVersion","uri","policy","Error","method","json","assign","resourceId","permissions","Array","isArray","permissionsArray","req","useQuerystring","err","resp","availablePermissions","permissionsHash","reduce","acc","permission","indexOf","promisifyAll"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,GAAR,GAAc,KAAK,CAAnB;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,G;AACF,eAAYK,MAAZ,EAAoB;AAAA;;AAChB,SAAKC,QAAL,GAAgBD,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBH,MAApB,CAAhB;AACA,SAAKI,WAAL,GAAmB,aAAaJ,MAAM,CAACK,KAAP,EAAhC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACI,mBAAUC,iBAAV,EAA6BC,QAA7B,EAAuC;AAAA,8BACDR,MAAM,CAACS,SAAP,CAAiBF,iBAAjB,EAAoCC,QAApC,CADC;AAAA,UAC3BE,OAD2B,qBAC3BA,OAD2B;AAAA,UACRC,EADQ,qBAClBH,QADkB;;AAEnC,UAAMI,EAAE,GAAG,EAAX;;AACA,U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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Iam = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\nclass Iam {\n    constructor(bucket) {\n        this.request_ = bucket.request.bind(bucket);\n        this.resourceId_ = 'buckets/' + bucket.getId();\n    }\n    /**\n     * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n     * @property {number} [requestedPolicyVersion] The version of IAM policies to\n     *     request. If a policy with a condition is requested without setting\n     *     this, the server will return an error. This must be set to a value\n     *     of 3 to retrieve IAM policies containing conditions. This is to\n     *     prevent client code that isn't aware of IAM conditions from\n     *     interpreting and modifying policies incorrectly. The service might\n     *     return a policy with version lower than the one that was requested,\n     *     based on the feature syntax in the policy fetched.\n     *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetPolicyResponse\n     * @property {Policy} 0 The policy.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @typedef {object} Policy\n     * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n     * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n     * @property {number} [policy.version] The syntax schema version of the Policy.\n     *      To set an IAM policy with conditional binding, this field must be set to\n     *      3 or greater.\n     *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n     */\n    /**\n     * @typedef {object} PolicyBinding\n     * @property {string} role Role that is assigned to members.\n     * @property {string[]} members Specifies the identities requesting access for the bucket.\n     * @property {Expr} [condition] The condition that is associated with this binding.\n     */\n    /**\n     * @typedef {object} Expr\n     * @property {string} [title] An optional title for the expression, i.e. a\n     *     short string describing its purpose. This can be used e.g. in UIs\n     *     which allow to enter the expression.\n     * @property {string} [description] An optional description of the\n     *     expression. This is a longer text which describes the expression,\n     *     e.g. when hovered over it in a UI.\n     * @property {string} expression Textual representation of an expression in\n     *     Common Expression Language syntax. The application context of the\n     *     containing message determines which well-known feature set of CEL\n     *     is supported.The condition that is associated with this binding.\n     *\n     * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n     */\n    /**\n     * Get the IAM policy.\n     *\n     * @param {GetPolicyOptions} [options] Request options.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.iam.getPolicy(\n     *     {requestedPolicyVersion: 3},\n     *     function(err, policy, apiResponse) {\n     *\n     *     },\n     * );\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n     *   .then(function(data) {\n     *     const policy = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_view_bucket_iam_members\n     * Example of retrieving a bucket's IAM policy:\n     */\n    getPolicy(optionsOrCallback, callback) {\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        const qs = {};\n        if (options.userProject) {\n            qs.userProject = options.userProject;\n        }\n        if (options.requestedPolicyVersion !== null &&\n            options.requestedPolicyVersion !== undefined) {\n            qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n        }\n        this.request_({\n            uri: '/iam',\n            qs,\n        }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration opbject.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n    setPolicy(policy, optionsOrCallback, callback) {\n        if (policy === null || typeof policy !== 'object') {\n            throw new Error('A policy object is required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        this.request_({\n            method: 'PUT',\n            uri: '/iam',\n            json: Object.assign({\n                resourceId: this.resourceId_,\n            }, policy),\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    testPermissions(permissions, optionsOrCallback, callback) {\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n            throw new Error('Permissions are required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        const permissionsArray = arrify(permissions);\n        const req = Object.assign({\n            permissions: permissionsArray,\n        }, options);\n        this.request_({\n            uri: '/iam/testPermissions',\n            qs: req,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                cb(err, null, resp);\n                return;\n            }\n            const availablePermissions = arrify(resp.permissions);\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            cb(null, permissionsHash, resp);\n        });\n    }\n}\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Iam);\n//# sourceMappingURL=iam.js.map"]},"metadata":{},"sourceType":"script"}