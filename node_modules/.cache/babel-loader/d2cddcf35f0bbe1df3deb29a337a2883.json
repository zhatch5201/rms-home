{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = exports.PROTOCOL_REGEX = void 0;\n\nvar common_1 = require(\"@google-cloud/common\");\n\nvar paginator_1 = require(\"@google-cloud/paginator\");\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n\nvar arrify = require(\"arrify\");\n\nvar bucket_1 = require(\"./bucket\");\n\nvar channel_1 = require(\"./channel\");\n\nvar file_1 = require(\"./file\");\n\nvar util_1 = require(\"./util\");\n\nvar hmacKey_1 = require(\"./hmacKey\");\n\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\n\nvar Storage = /*#__PURE__*/function (_common_1$Service) {\n  _inherits(Storage, _common_1$Service);\n\n  var _super = _createSuper(Storage);\n\n  /**\n   * @typedef {object} StorageOptions\n   * @property {string} [projectId] The project ID from the Google Developer's\n   *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n   *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n   * in an environment which supports {@link\n   * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n   * Application Default Credentials}, your project ID will be detected\n   * automatically.\n   * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n   *     downloaded from the Google Developers Console. If you provide a path to\n   * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n   *     .p12 require you to specify the `email` option as well.\n   * @property {string} [email] Account email address. Required when using a .pem\n   *     or .p12 keyFilename.\n   * @property {object} [credentials] Credentials object.\n   * @property {string} [credentials.client_email]\n   * @property {string} [credentials.private_key]\n   * @property {boolean} [autoRetry=true] Automatically retry requests if the\n   *     response is related to rate limits or certain intermittent server\n   * errors. We will exponentially backoff subsequent requests by default.\n   * @property {number} [maxRetries=3] Maximum number of automatic retries\n   *     attempted before returning the error.\n   * @property {Constructor} [promise] Custom promise module to use instead of\n   *     native Promises.\n   * @property {string} [userAgent] The value to be prepended to the User-Agent\n   *     header in API requests.\n   */\n\n  /**\n   * Constructs the Storage client.\n   *\n   * @example <caption>Create a client that uses Application Default Credentials\n   * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\n   * storage = new Storage();\n   *\n   * @example <caption>Create a client with explicit credentials</caption>\n   * storage');/storage');\n   * const storage = new Storage({\n   *   projectId: 'your-project-id',\n   *   keyFilename: '/path/to/keyfile.json'\n   * });\n   *\n   * @param {StorageOptions} [options] Configuration options.\n   */\n  function Storage() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Storage);\n\n    var apiEndpoint = 'https://storage.googleapis.com';\n    var customEndpoint = false;\n    var EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n\n    if (typeof EMULATOR_HOST === 'string') {\n      apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n      customEndpoint = true;\n    }\n\n    if (options.apiEndpoint) {\n      apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n      customEndpoint = true;\n    }\n\n    options = Object.assign({}, options, {\n      apiEndpoint: apiEndpoint\n    });\n    var baseUrl = EMULATOR_HOST || \"\".concat(options.apiEndpoint, \"/storage/v1\");\n    var config = {\n      apiEndpoint: options.apiEndpoint,\n      baseUrl: baseUrl,\n      customEndpoint: customEndpoint,\n      projectIdRequired: false,\n      scopes: ['https://www.googleapis.com/auth/iam', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/devstorage.full_control'],\n      packageJson: require('../../package.json')\n    };\n    _this = _super.call(this, config, options);\n    /**\n     * Reference to {@link Storage.acl}.\n     *\n     * @name Storage#acl\n     * @see Storage.acl\n     */\n\n    _this.acl = Storage.acl;\n    _this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n    _this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n    return _this;\n  }\n\n  _createClass(Storage, [{\n    key: \"bucket\",\n    value:\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     */\n    function bucket(name, options) {\n      if (!name) {\n        throw new Error('A bucket name is needed to use Cloud Storage.');\n      }\n\n      return new bucket_1.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(id, resourceId) {\n      return new channel_1.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n     *     Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [storageClass] The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * [Bucket Naming\n     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n     *\n     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(name, metadataOrCallback, callback) {\n      var _this2 = this;\n\n      if (!name) {\n        throw new Error('A name is required to create a bucket.');\n      }\n\n      var metadata;\n\n      if (!callback) {\n        callback = metadataOrCallback;\n        metadata = {};\n      } else {\n        metadata = metadataOrCallback;\n      }\n\n      var body = Object.assign({}, metadata, {\n        name: name\n      });\n      var storageClasses = {\n        archive: 'ARCHIVE',\n        coldline: 'COLDLINE',\n        dra: 'DURABLE_REDUCED_AVAILABILITY',\n        multiRegional: 'MULTI_REGIONAL',\n        nearline: 'NEARLINE',\n        regional: 'REGIONAL',\n        standard: 'STANDARD'\n      };\n      Object.keys(storageClasses).forEach(function (storageClass) {\n        if (body[storageClass]) {\n          if (metadata.storageClass && metadata.storageClass !== storageClass) {\n            throw new Error(\"Both `\".concat(storageClass, \"` and `storageClass` were provided.\"));\n          }\n\n          body.storageClass = storageClasses[storageClass];\n          delete body[storageClass];\n        }\n      });\n\n      if (body.requesterPays) {\n        body.billing = {\n          requesterPays: body.requesterPays\n        };\n        delete body.requesterPays;\n      }\n\n      var query = {\n        project: this.projectId\n      };\n\n      if (body.userProject) {\n        query.userProject = body.userProject;\n        delete body.userProject;\n      }\n\n      this.request({\n        method: 'POST',\n        uri: '/b',\n        qs: query,\n        json: body\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, resp);\n          return;\n        }\n\n        var bucket = _this2.bucket(name);\n\n        bucket.metadata = resp;\n        callback(null, bucket, resp);\n      });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     */\n\n  }, {\n    key: \"createHmacKey\",\n    value: function createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n      var _this3 = this;\n\n      if (typeof serviceAccountEmail !== 'string') {\n        throw new Error('The first argument must be a service account email to create an HMAC key.');\n      }\n\n      var _util_1$normalize = util_1.normalize(optionsOrCb, cb),\n          options = _util_1$normalize.options,\n          callback = _util_1$normalize.callback;\n\n      var query = Object.assign({}, options, {\n        serviceAccountEmail: serviceAccountEmail\n      });\n      var projectId = query.projectId || this.projectId;\n      delete query.projectId;\n      this.request({\n        method: 'POST',\n        uri: \"/projects/\".concat(projectId, \"/hmacKeys\"),\n        qs: query\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, null, resp);\n          return;\n        }\n\n        var metadata = resp.metadata;\n\n        var hmacKey = _this3.hmacKey(metadata.accessId, {\n          projectId: metadata.projectId\n        });\n\n        hmacKey.metadata = resp.metadata;\n        callback(null, hmacKey, resp.secret, resp);\n      });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     * @property {objcet} 1 nextQuery A query object to receive more results.\n     * @property {object} 2 The full API response.\n     */\n\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n\n  }, {\n    key: \"getBuckets\",\n    value: function getBuckets(optionsOrCallback, cb) {\n      var _this4 = this;\n\n      var _util_1$normalize2 = util_1.normalize(optionsOrCallback, cb),\n          options = _util_1$normalize2.options,\n          callback = _util_1$normalize2.callback;\n\n      options.project = options.project || this.projectId;\n      this.request({\n        uri: '/b',\n        qs: options\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, null, resp);\n          return;\n        }\n\n        var buckets = arrify(resp.items).map(function (bucket) {\n          var bucketInstance = _this4.bucket(bucket.id);\n\n          bucketInstance.metadata = bucket;\n          return bucketInstance;\n        });\n        var nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n          pageToken: resp.nextPageToken\n        }) : null;\n        callback(null, buckets, nextQuery, resp);\n      });\n    }\n  }, {\n    key: \"getHmacKeys\",\n    value: function getHmacKeys(optionsOrCb, cb) {\n      var _this5 = this;\n\n      var _util_1$normalize3 = util_1.normalize(optionsOrCb, cb),\n          options = _util_1$normalize3.options,\n          callback = _util_1$normalize3.callback;\n\n      var query = Object.assign({}, options);\n      var projectId = query.projectId || this.projectId;\n      delete query.projectId;\n      this.request({\n        uri: \"/projects/\".concat(projectId, \"/hmacKeys\"),\n        qs: query\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, null, resp);\n          return;\n        }\n\n        var hmacKeys = arrify(resp.items).map(function (hmacKey) {\n          var hmacKeyInstance = _this5.hmacKey(hmacKey.accessId, {\n            projectId: hmacKey.projectId\n          });\n\n          hmacKeyInstance.metadata = hmacKey;\n          return hmacKeyInstance;\n        });\n        var nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n          pageToken: resp.nextPageToken\n        }) : null;\n        callback(null, hmacKeys, nextQuery, resp);\n      });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"getServiceAccount\",\n    value: function getServiceAccount(optionsOrCallback, cb) {\n      var _util_1$normalize4 = util_1.normalize(optionsOrCallback, cb),\n          options = _util_1$normalize4.options,\n          callback = _util_1$normalize4.callback;\n\n      this.request({\n        uri: \"/projects/\".concat(this.projectId, \"/serviceAccount\"),\n        qs: options\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, resp);\n          return;\n        }\n\n        var camelCaseResponse = {};\n\n        for (var prop in resp) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (resp.hasOwnProperty(prop)) {\n            var camelCaseProp = prop.replace(/_(\\w)/g, function (_, match) {\n              return match.toUpperCase();\n            });\n            camelCaseResponse[camelCaseProp] = resp[prop];\n          }\n        }\n\n        callback(null, camelCaseResponse, resp);\n      });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor owptions.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     */\n\n  }, {\n    key: \"hmacKey\",\n    value: function hmacKey(accessId, options) {\n      if (!accessId) {\n        throw new Error('An access ID is needed to create an HmacKey object.');\n      }\n\n      return new hmacKey_1.HmacKey(this, accessId, options);\n    }\n  }], [{\n    key: \"sanitizeEndpoint\",\n    value: function sanitizeEndpoint(url) {\n      if (!exports.PROTOCOL_REGEX.test(url)) {\n        url = \"https://\".concat(url);\n      }\n\n      return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n  }]);\n\n  return Storage;\n}(common_1.Service);\n\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\n\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\n\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\n\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\n\nStorage.HmacKey = hmacKey_1.HmacKey;\nStorage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Storage, {\n  exclude: ['bucket', 'channel', 'hmacKey']\n});","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/storage/build/src/storage.js"],"names":["Object","defineProperty","exports","value","Storage","PROTOCOL_REGEX","common_1","require","paginator_1","promisify_1","arrify","bucket_1","channel_1","file_1","util_1","hmacKey_1","options","apiEndpoint","customEndpoint","EMULATOR_HOST","process","env","STORAGE_EMULATOR_HOST","sanitizeEndpoint","assign","baseUrl","config","projectIdRequired","scopes","packageJson","acl","getBucketsStream","paginator","streamify","getHmacKeysStream","name","Error","Bucket","id","resourceId","Channel","metadataOrCallback","callback","metadata","body","storageClasses","archive","coldline","dra","multiRegional","nearline","regional","standard","keys","forEach","storageClass","requesterPays","billing","query","project","projectId","userProject","request","method","uri","qs","json","err","resp","bucket","serviceAccountEmail","optionsOrCb","cb","normalize","hmacKey","accessId","secret","optionsOrCallback","buckets","items","map","bucketInstance","nextQuery","nextPageToken","pageToken","hmacKeys","hmacKeyInstance","camelCaseResponse","prop","hasOwnProperty","camelCaseProp","replace","_","match","toUpperCase","HmacKey","url","test","Service","File","OWNER_ROLE","READER_ROLE","WRITER_ROLE","extend","promisifyAll","exclude"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,cAAR,GAAyB,KAAK,CAAhD;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAD,CAA3B;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,yBAAD,CAA3B;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMO,MAAM,GAAGP,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMQ,SAAS,GAAGR,OAAO,CAAC,WAAD,CAAzB;;AACAL,OAAO,CAACG,cAAR,GAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMD,O;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,qBAA0B;AAAA;;AAAA,QAAdY,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,QAAIC,WAAW,GAAG,gCAAlB;AACA,QAAIC,cAAc,GAAG,KAArB;AACA,QAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAlC;;AACA,QAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;AACnCF,MAAAA,WAAW,GAAGb,OAAO,CAACmB,gBAAR,CAAyBJ,aAAzB,CAAd;AACAD,MAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,QAAIF,OAAO,CAACC,WAAZ,EAAyB;AACrBA,MAAAA,WAAW,GAAGb,OAAO,CAACmB,gBAAR,CAAyBP,OAAO,CAACC,WAAjC,CAAd;AACAC,MAAAA,cAAc,GAAG,IAAjB;AACH;;AACDF,IAAAA,OAAO,GAAGhB,MAAM,CAACwB,MAAP,CAAc,EAAd,EAAkBR,OAAlB,EAA2B;AAAEC,MAAAA,WAAW,EAAXA;AAAF,KAA3B,CAAV;AACA,QAAMQ,OAAO,GAAGN,aAAa,cAAOH,OAAO,CAACC,WAAf,gBAA7B;AACA,QAAMS,MAAM,GAAG;AACXT,MAAAA,WAAW,EAAED,OAAO,CAACC,WADV;AAEXQ,MAAAA,OAAO,EAAPA,OAFW;AAGXP,MAAAA,cAAc,EAAdA,cAHW;AAIXS,MAAAA,iBAAiB,EAAE,KAJR;AAKXC,MAAAA,MAAM,EAAE,CACJ,qCADI,EAEJ,gDAFI,EAGJ,yDAHI,CALG;AAUXC,MAAAA,WAAW,EAAEtB,OAAO,CAAC,oBAAD;AAVT,KAAf;AAYA,8BAAMmB,MAAN,EAAcV,OAAd;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,UAAKc,GAAL,GAAW1B,OAAO,CAAC0B,GAAnB;AACA,UAAKC,gBAAL,GAAwBvB,WAAW,CAACwB,SAAZ,CAAsBC,SAAtB,CAAgC,YAAhC,CAAxB;AACA,UAAKC,iBAAL,GAAyB1B,WAAW,CAACwB,SAAZ,CAAsBC,SAAtB,CAAgC,aAAhC,CAAzB;AAnCsB;AAoCzB;;;;;AAOD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,oBAAOE,IAAP,EAAanB,OAAb,EAAsB;AAClB,UAAI,CAACmB,IAAL,EAAW;AACP,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AACD,aAAO,IAAIzB,QAAQ,CAAC0B,MAAb,CAAoB,IAApB,EAA0BF,IAA1B,EAAgCnB,OAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQsB,EAAR,EAAYC,UAAZ,EAAwB;AACpB,aAAO,IAAI3B,SAAS,CAAC4B,OAAd,CAAsB,IAAtB,EAA4BF,EAA5B,EAAgCC,UAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = exports.PROTOCOL_REGEX = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst bucket_1 = require(\"./bucket\");\nconst channel_1 = require(\"./channel\");\nconst file_1 = require(\"./file\");\nconst util_1 = require(\"./util\");\nconst hmacKey_1 = require(\"./hmacKey\");\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\nclass Storage extends common_1.Service {\n    /**\n     * @typedef {object} StorageOptions\n     * @property {string} [projectId] The project ID from the Google Developer's\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n     * in an environment which supports {@link\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n     * Application Default Credentials}, your project ID will be detected\n     * automatically.\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n     *     downloaded from the Google Developers Console. If you provide a path to\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n     *     .p12 require you to specify the `email` option as well.\n     * @property {string} [email] Account email address. Required when using a .pem\n     *     or .p12 keyFilename.\n     * @property {object} [credentials] Credentials object.\n     * @property {string} [credentials.client_email]\n     * @property {string} [credentials.private_key]\n     * @property {boolean} [autoRetry=true] Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * @property {number} [maxRetries=3] Maximum number of automatic retries\n     *     attempted before returning the error.\n     * @property {Constructor} [promise] Custom promise module to use instead of\n     *     native Promises.\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\n     *     header in API requests.\n     */\n    /**\n     * Constructs the Storage client.\n     *\n     * @example <caption>Create a client that uses Application Default Credentials\n     * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\n     * storage = new Storage();\n     *\n     * @example <caption>Create a client with explicit credentials</caption>\n     * storage');/storage');\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   keyFilename: '/path/to/keyfile.json'\n     * });\n     *\n     * @param {StorageOptions} [options] Configuration options.\n     */\n    constructor(options = {}) {\n        let apiEndpoint = 'https://storage.googleapis.com';\n        let customEndpoint = false;\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n        if (typeof EMULATOR_HOST === 'string') {\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n            customEndpoint = true;\n        }\n        if (options.apiEndpoint) {\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n            customEndpoint = true;\n        }\n        options = Object.assign({}, options, { apiEndpoint });\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            baseUrl,\n            customEndpoint,\n            projectIdRequired: false,\n            scopes: [\n                'https://www.googleapis.com/auth/iam',\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/devstorage.full_control',\n            ],\n            packageJson: require('../../package.json'),\n        };\n        super(config, options);\n        /**\n         * Reference to {@link Storage.acl}.\n         *\n         * @name Storage#acl\n         * @see Storage.acl\n         */\n        this.acl = Storage.acl;\n        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n    }\n    static sanitizeEndpoint(url) {\n        if (!exports.PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     */\n    bucket(name, options) {\n        if (!name) {\n            throw new Error('A bucket name is needed to use Cloud Storage.');\n        }\n        return new bucket_1.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     */\n    channel(id, resourceId) {\n        return new channel_1.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n     *     Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [storageClass] The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * [Bucket Naming\n     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n     *\n     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n    createBucket(name, metadataOrCallback, callback) {\n        if (!name) {\n            throw new Error('A name is required to create a bucket.');\n        }\n        let metadata;\n        if (!callback) {\n            callback = metadataOrCallback;\n            metadata = {};\n        }\n        else {\n            metadata = metadataOrCallback;\n        }\n        const body = Object.assign({}, metadata, { name });\n        const storageClasses = {\n            archive: 'ARCHIVE',\n            coldline: 'COLDLINE',\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\n            multiRegional: 'MULTI_REGIONAL',\n            nearline: 'NEARLINE',\n            regional: 'REGIONAL',\n            standard: 'STANDARD',\n        };\n        Object.keys(storageClasses).forEach(storageClass => {\n            if (body[storageClass]) {\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n                }\n                body.storageClass = storageClasses[storageClass];\n                delete body[storageClass];\n            }\n        });\n        if (body.requesterPays) {\n            body.billing = {\n                requesterPays: body.requesterPays,\n            };\n            delete body.requesterPays;\n        }\n        const query = {\n            project: this.projectId,\n        };\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/b',\n            qs: query,\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const bucket = this.bucket(name);\n            bucket.metadata = resp;\n            callback(null, bucket, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     */\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n        if (typeof serviceAccountEmail !== 'string') {\n            throw new Error('The first argument must be a service account email to create an HMAC key.');\n        }\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options, { serviceAccountEmail });\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            method: 'POST',\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const metadata = resp.metadata;\n            const hmacKey = this.hmacKey(metadata.accessId, {\n                projectId: metadata.projectId,\n            });\n            hmacKey.metadata = resp.metadata;\n            callback(null, hmacKey, resp.secret, resp);\n        });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     * @property {objcet} 1 nextQuery A query object to receive more results.\n     * @property {object} 2 The full API response.\n     */\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n    getBuckets(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        options.project = options.project || this.projectId;\n        this.request({\n            uri: '/b',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const buckets = arrify(resp.items).map((bucket) => {\n                const bucketInstance = this.bucket(bucket.id);\n                bucketInstance.metadata = bucket;\n                return bucketInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, buckets, nextQuery, resp);\n        });\n    }\n    getHmacKeys(optionsOrCb, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options);\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const hmacKeys = arrify(resp.items).map((hmacKey) => {\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n                    projectId: hmacKey.projectId,\n                });\n                hmacKeyInstance.metadata = hmacKey;\n                return hmacKeyInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, hmacKeys, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     */\n    getServiceAccount(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        this.request({\n            uri: `/projects/${this.projectId}/serviceAccount`,\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const camelCaseResponse = {};\n            for (const prop in resp) {\n                // eslint-disable-next-line no-prototype-builtins\n                if (resp.hasOwnProperty(prop)) {\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n                    camelCaseResponse[camelCaseProp] = resp[prop];\n                }\n            }\n            callback(null, camelCaseResponse, resp);\n        });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor owptions.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     */\n    hmacKey(accessId, options) {\n        if (!accessId) {\n            throw new Error('An access ID is needed to create an HmacKey object.');\n        }\n        return new hmacKey_1.HmacKey(this, accessId, options);\n    }\n}\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\nStorage.HmacKey = hmacKey_1.HmacKey;\nStorage.acl = {\n    OWNER_ROLE: 'OWNER',\n    READER_ROLE: 'READER',\n    WRITER_ROLE: 'WRITER',\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Storage, {\n    exclude: ['bucket', 'channel', 'hmacKey'],\n});\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"script"}