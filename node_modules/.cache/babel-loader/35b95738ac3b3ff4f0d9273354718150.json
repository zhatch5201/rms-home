{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\n\nvar call_1 = require(\"../call\");\n\nvar gax_1 = require(\"../gax\");\n\nvar longrunning_1 = require(\"./longrunning\");\n\nvar LongrunningApiCaller = /*#__PURE__*/function () {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  function LongrunningApiCaller(longrunningDescriptor) {\n    _classCallCheck(this, LongrunningApiCaller);\n\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  _createClass(LongrunningApiCaller, [{\n    key: \"init\",\n    value: function init(callback) {\n      if (callback) {\n        return new call_1.OngoingCall(callback);\n      }\n\n      return new call_1.OngoingCallPromise();\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      return func;\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, canceller) {\n      var _this = this;\n\n      canceller.call(function (argument, callback) {\n        return _this._wrapOperation(apiCall, settings, argument, callback);\n      }, argument);\n    }\n  }, {\n    key: \"_wrapOperation\",\n    value: function _wrapOperation(apiCall, settings, argument, callback) {\n      var backoffSettings = settings.longrunning;\n\n      if (!backoffSettings) {\n        backoffSettings = gax_1.createDefaultBackoffSettings();\n      }\n\n      var longrunningDescriptor = this.longrunningDescriptor;\n      return apiCall(argument, function (err, rawResponse) {\n        if (err) {\n          callback(err, null, null, rawResponse);\n          return;\n        }\n\n        var operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n        callback(null, operation, rawResponse);\n      });\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(canceller, err) {\n      canceller.callback(err);\n    }\n  }, {\n    key: \"result\",\n    value: function result(canceller) {\n      return canceller.promise;\n    }\n  }]);\n\n  return LongrunningApiCaller;\n}();\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"sources":["../../../src/longRunningCalls/longRunningApiCaller.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;AAIH,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAOA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;IAIa,oB;AAEX;;;;;;;;AAQG;AACH,gCAAY,qBAAZ,EAAwD;AAAA;;AACtD,SAAK,qBAAL,GAA6B,qBAA7B;AACD;;;;WAED,cAAK,QAAL,EAA2B;AACzB,UAAI,QAAJ,EAAc;AACZ,eAAO,IAAI,MAAA,CAAA,WAAJ,CAAgB,QAAhB,CAAP;AACD;;AACD,aAAO,IAAI,MAAA,CAAA,kBAAJ,EAAP;AACD;;;WAED,cAAK,IAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;;WAED,cACE,OADF,EAEE,QAFF,EAGE,QAHF,EAIE,SAJF,EAI+B;AAAA;;AAE7B,MAAA,SAAS,CAAC,IAAV,CAAe,UAAC,QAAD,EAAW,QAAX,EAAuB;AACpC,eAAO,KAAI,CAAC,cAAL,CAAoB,OAApB,EAA6B,QAA7B,EAAuC,QAAvC,EAAiD,QAAjD,CAAP;AACD,OAFD,EAEG,QAFH;AAGD;;;WAEO,wBACN,OADM,EAEN,QAFM,EAGN,QAHM,EAIN,QAJM,EAIe;AAErB,UAAI,eAAe,GAAgC,QAAQ,CAAC,WAA5D;;AACA,UAAI,CAAC,eAAL,EAAsB;AACpB,QAAA,eAAe,GAAG,KAAA,CAAA,4BAAA,EAAlB;AACD;;AAED,UAAM,qBAAqB,GAAG,KAAK,qBAAnC;AACA,aAAO,OAAO,CACZ,QADY,EAEZ,UAAC,GAAD,EAA0B,WAA1B,EAAgE;AAC9D,YAAI,GAAJ,EAAS;AACP,UAAA,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,WAAlB,CAAR;AACA;AACD;;AAED,YAAM,SAAS,GAAG,IAAI,aAAA,CAAA,SAAJ,CAChB,WADgB,EAEhB,qBAFgB,EAGhB,eAHgB,EAIhB,QAJgB,CAAlB;AAOA,QAAA,QAAQ,CAAC,IAAD,EAAO,SAAP,EAAkB,WAAlB,CAAR;AACD,OAhBW,CAAd;AAkBD;;;WAED,cAAK,SAAL,EAAoC,GAApC,EAAoD;AAClD,MAAA,SAAS,CAAC,QAAV,CAAoB,GAApB;AACD;;;WAED,gBAAO,SAAP,EAAoC;AAClC,aAAO,SAAS,CAAC,OAAjB;AACD;;;;;;AA3EH,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LongrunningApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = gax_1.createDefaultBackoffSettings();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n//# sourceMappingURL=longRunningApiCaller.js.map"]},"metadata":{},"sourceType":"script"}