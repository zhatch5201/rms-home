{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar duplexify = require('duplexify'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\n\nvar StreamProxy = /*#__PURE__*/function (_duplexify) {\n  _inherits(StreamProxy, _duplexify);\n\n  var _super = _createSuper(StreamProxy);\n\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  function StreamProxy(type, callback) {\n    var _this;\n\n    _classCallCheck(this, StreamProxy);\n\n    _this = _super.call(this, undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    _this.type = type;\n    _this._callback = callback;\n    _this._isCancelCalled = false;\n    return _this;\n  }\n\n  _createClass(StreamProxy, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.stream) {\n        this.stream.cancel();\n      } else {\n        this._isCancelCalled = true;\n      }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n\n  }, {\n    key: \"forwardEvents\",\n    value: function forwardEvents(stream) {\n      var _this2 = this;\n\n      var eventsToForward = ['metadata', 'response', 'status'];\n      eventsToForward.forEach(function (event) {\n        stream.on(event, _this2.emit.bind(_this2, event));\n      }); // We also want to supply the status data as 'response' event to support\n      // the behavior of google-cloud-node expects.\n      // see:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n      stream.on('metadata', function (metadata) {\n        // Create a response object with succeeds.\n        // TODO: unify this logic with the decoration of gRPC response when it's\n        // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK',\n          metadata: metadata\n        });\n      });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n\n  }, {\n    key: \"setStream\",\n    value: function setStream(apiCall, argument) {\n      var _this3 = this;\n\n      var retryRequestOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (this.type === StreamType.SERVER_STREAMING) {\n        var retryStream = retryRequest(null, {\n          objectMode: true,\n          request: function request() {\n            if (_this3._isCancelCalled) {\n              if (_this3.stream) {\n                _this3.stream.cancel();\n              }\n\n              return;\n            }\n\n            var stream = apiCall(argument, _this3._callback);\n            _this3.stream = stream;\n\n            _this3.forwardEvents(stream);\n\n            return stream;\n          },\n          retries: retryRequestOptions.retries,\n          currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n          noResponseRetries: retryRequestOptions.noResponseRetries,\n          shouldRetryFn: retryRequestOptions.shouldRetryFn\n        });\n        this.setReadable(retryStream);\n        return;\n      }\n\n      var stream = apiCall(argument, this._callback);\n      this.stream = stream;\n      this.forwardEvents(stream);\n\n      if (this.type === StreamType.CLIENT_STREAMING) {\n        this.setWritable(stream);\n      }\n\n      if (this.type === StreamType.BIDI_STREAMING) {\n        this.setReadable(stream);\n        this.setWritable(stream);\n      }\n\n      if (this._isCancelCalled && this.stream) {\n        this.stream.cancel();\n      }\n    }\n  }]);\n\n  return StreamProxy;\n}(duplexify);\n\nexports.StreamProxy = StreamProxy;","map":{"version":3,"sources":["../../../src/streamingCalls/streaming.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamProxy = exports.StreamType = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = require('duplexify');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n    /** Client sends a single request, server streams responses. */\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\nclass StreamProxy extends duplexify {\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */\n    constructor(type, callback) {\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING,\n        });\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        }\n        else {\n            this._isCancelCalled = true;\n        }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n    forwardEvents(stream) {\n        const eventsToForward = ['metadata', 'response', 'status'];\n        eventsToForward.forEach(event => {\n            stream.on(event, this.emit.bind(this, event));\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on('metadata', metadata => {\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit('response', {\n                code: 200,\n                details: '',\n                message: 'OK',\n                metadata,\n            });\n        });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n    setStream(apiCall, argument, retryRequestOptions = {}) {\n        if (this.type === StreamType.SERVER_STREAMING) {\n            const retryStream = retryRequest(null, {\n                objectMode: true,\n                request: () => {\n                    if (this._isCancelCalled) {\n                        if (this.stream) {\n                            this.stream.cancel();\n                        }\n                        return;\n                    }\n                    const stream = apiCall(argument, this._callback);\n                    this.stream = stream;\n                    this.forwardEvents(stream);\n                    return stream;\n                },\n                retries: retryRequestOptions.retries,\n                currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                noResponseRetries: retryRequestOptions.noResponseRetries,\n                shouldRetryFn: retryRequestOptions.shouldRetryFn,\n            });\n            this.setReadable(retryStream);\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n}\nexports.StreamProxy = StreamProxy;\n//# sourceMappingURL=streaming.js.map"]},"metadata":{},"sourceType":"script"}