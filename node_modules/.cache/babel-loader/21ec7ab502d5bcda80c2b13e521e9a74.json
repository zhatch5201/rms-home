{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_partition_1 = require(\"./query-partition\");\n\nvar util_1 = require(\"./util\");\n\nvar logger_1 = require(\"./logger\");\n\nvar reference_1 = require(\"./reference\");\n\nvar path_1 = require(\"./path\");\n\nvar validate_1 = require(\"./validate\");\n\nvar types_1 = require(\"./types\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\n\n\nvar CollectionGroup = /*#__PURE__*/function (_reference_1$Query) {\n  _inherits(CollectionGroup, _reference_1$Query);\n\n  var _super = _createSuper(CollectionGroup);\n\n  /** @hideconstructor */\n  function CollectionGroup(firestore, collectionId, converter) {\n    _classCallCheck(this, CollectionGroup);\n\n    return _super.call(this, firestore, reference_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n  }\n  /**\n   * Partitions a query by returning partition cursors that can be used to run\n   * the query in parallel. The returned cursors are split points that can be\n   * used as starting and end points for individual query invocations.\n   *\n   * @example\n   * const query = firestore.collectionGroup('collectionId');\n   * for await (const partition of query.getPartitions(42)) {\n   *   const partitionedQuery = partition.toQuery();\n   *   const querySnapshot = await partitionedQuery.get();\n   *   console.log(`Partition contained ${querySnapshot.length} documents`);\n   * }\n   *\n   * @param {number} desiredPartitionCount The desired maximum number of\n   * partition points. The number must be strictly positive. The actual number\n   * of partitions returned may be fewer.\n   * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n   * `QueryPartition`s.\n   */\n\n\n  _createClass(CollectionGroup, [{\n    key: \"getPartitions\",\n    value: function getPartitions(desiredPartitionCount) {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, tag, lastValues, partitionCount, queryWithDefaultOrder, request, stream, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, currentCursor, currentValues;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                validate_1.validateInteger('desiredPartitionCount', desiredPartitionCount, {\n                  minValue: 1\n                });\n                tag = util_1.requestTag();\n                _context.next = 4;\n                return _awaitAsyncGenerator(_this.firestore.initializeIfNeeded(tag));\n\n              case 4:\n                lastValues = undefined;\n                partitionCount = 0;\n\n                if (!(desiredPartitionCount > 1)) {\n                  _context.next = 51;\n                  break;\n                }\n\n                // Partition queries require explicit ordering by __name__.\n                queryWithDefaultOrder = _this.orderBy(path_1.FieldPath.documentId());\n                request = queryWithDefaultOrder.toProto(); // Since we are always returning an extra partition (with an empty endBefore\n                // cursor), we reduce the desired partition count by one.\n\n                request.partitionCount = desiredPartitionCount - 1;\n                _context.next = 12;\n                return _awaitAsyncGenerator(_this.firestore.requestStream('partitionQueryStream', request, tag));\n\n              case 12:\n                stream = _context.sent;\n                stream.resume();\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 16;\n                _iterator = _asyncIterator(stream);\n\n              case 18:\n                _context.next = 20;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 20:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 24;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 24:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 35;\n                  break;\n                }\n\n                currentCursor = _value;\n                ++partitionCount;\n                currentValues = (_a = currentCursor.values) !== null && _a !== void 0 ? _a : [];\n                _context.next = 31;\n                return new query_partition_1.QueryPartition(_this._firestore, _this._queryOptions.collectionId, _this._queryOptions.converter, lastValues, currentValues);\n\n              case 31:\n                lastValues = currentValues;\n\n              case 32:\n                _iteratorNormalCompletion = true;\n                _context.next = 18;\n                break;\n\n              case 35:\n                _context.next = 41;\n                break;\n\n              case 37:\n                _context.prev = 37;\n                _context.t0 = _context[\"catch\"](16);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 41:\n                _context.prev = 41;\n                _context.prev = 42;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 46;\n                  break;\n                }\n\n                _context.next = 46;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 46:\n                _context.prev = 46;\n\n                if (!_didIteratorError) {\n                  _context.next = 49;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 49:\n                return _context.finish(46);\n\n              case 50:\n                return _context.finish(41);\n\n              case 51:\n                logger_1.logger('Firestore.getPartitions', tag, 'Received %d partitions', partitionCount); // Return the extra partition with the empty cursor.\n\n                _context.next = 54;\n                return new query_partition_1.QueryPartition(_this._firestore, _this._queryOptions.collectionId, _this._queryOptions.converter, lastValues, undefined);\n\n              case 54:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[16, 37, 41, 51], [42,, 46, 50]]);\n      }))();\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n  }]);\n\n  return CollectionGroup;\n}(reference_1.Query);\n\nexports.CollectionGroup = CollectionGroup;","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/firestore/build/src/collection-group.js"],"names":["Object","defineProperty","exports","value","query_partition_1","require","util_1","logger_1","reference_1","path_1","validate_1","types_1","CollectionGroup","firestore","collectionId","converter","QueryOptions","forCollectionGroupQuery","desiredPartitionCount","validateInteger","minValue","tag","requestTag","initializeIfNeeded","lastValues","undefined","partitionCount","queryWithDefaultOrder","orderBy","FieldPath","documentId","request","toProto","requestStream","stream","resume","currentCursor","currentValues","_a","values","QueryPartition","_firestore","_queryOptions","logger","defaultConverter","Query"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst query_partition_1 = require(\"./query-partition\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\nconst reference_1 = require(\"./reference\");\nconst path_1 = require(\"./path\");\nconst validate_1 = require(\"./validate\");\nconst types_1 = require(\"./types\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\nclass CollectionGroup extends reference_1.Query {\n    /** @hideconstructor */\n    constructor(firestore, collectionId, converter) {\n        super(firestore, reference_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n    }\n    /**\n     * Partitions a query by returning partition cursors that can be used to run\n     * the query in parallel. The returned cursors are split points that can be\n     * used as starting and end points for individual query invocations.\n     *\n     * @example\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * @param {number} desiredPartitionCount The desired maximum number of\n     * partition points. The number must be strictly positive. The actual number\n     * of partitions returned may be fewer.\n     * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n     * `QueryPartition`s.\n     */\n    async *getPartitions(desiredPartitionCount) {\n        var _a;\n        validate_1.validateInteger('desiredPartitionCount', desiredPartitionCount, {\n            minValue: 1,\n        });\n        const tag = util_1.requestTag();\n        await this.firestore.initializeIfNeeded(tag);\n        let lastValues = undefined;\n        let partitionCount = 0;\n        if (desiredPartitionCount > 1) {\n            // Partition queries require explicit ordering by __name__.\n            const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());\n            const request = queryWithDefaultOrder.toProto();\n            // Since we are always returning an extra partition (with an empty endBefore\n            // cursor), we reduce the desired partition count by one.\n            request.partitionCount = desiredPartitionCount - 1;\n            const stream = await this.firestore.requestStream('partitionQueryStream', request, tag);\n            stream.resume();\n            for await (const currentCursor of stream) {\n                ++partitionCount;\n                const currentValues = (_a = currentCursor.values) !== null && _a !== void 0 ? _a : [];\n                yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, lastValues, currentValues);\n                lastValues = currentValues;\n            }\n        }\n        logger_1.logger('Firestore.getPartitions', tag, 'Received %d partitions', partitionCount);\n        // Return the extra partition with the empty cursor.\n        yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, lastValues, undefined);\n    }\n    withConverter(converter) {\n        return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n}\nexports.CollectionGroup = CollectionGroup;\n//# sourceMappingURL=collection-group.js.map"]},"metadata":{},"sourceType":"script"}