{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\n\nvar stream = require(\"stream\");\n\nvar authclient_1 = require(\"./authclient\");\n\nvar sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\n\n\nvar STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\n\nvar STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\n\nvar DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/**\n * Offset to take into account network delays and server clock skews.\n */\n\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\n\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\n\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\n\nvar BaseExternalAccountClient = /*#__PURE__*/function (_authclient_1$AuthCli) {\n  _inherits(BaseExternalAccountClient, _authclient_1$AuthCli);\n\n  var _super = _createSuper(BaseExternalAccountClient);\n\n  /**\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function BaseExternalAccountClient(options, additionalOptions) {\n    var _this;\n\n    _classCallCheck(this, BaseExternalAccountClient);\n\n    _this = _super.call(this);\n\n    if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(\"Expected \\\"\".concat(exports.EXTERNAL_ACCOUNT_TYPE, \"\\\" type but \") + \"received \\\"\".concat(options.type, \"\\\"\"));\n    }\n\n    var clientAuth = options.client_id ? {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    } : undefined;\n    _this.stsCredential = new sts.StsCredentials(options.token_url, clientAuth); // Default OAuth scope. This could be overridden via public property.\n\n    _this.scopes = [DEFAULT_OAUTH_SCOPE];\n    _this.cachedAccessToken = null;\n    _this.audience = options.audience;\n    _this.subjectTokenType = options.subject_token_type;\n    _this.quotaProjectId = options.quota_project_id;\n    _this.serviceAccountImpersonationUrl = options.service_account_impersonation_url; // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      _this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n    } else {\n      _this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n\n    _this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    _this.projectId = null;\n    _this.projectNumber = _this.getProjectNumber(_this.audience);\n    return _this;\n  }\n  /**\n   * Provides a mechanism to inject GCP access tokens directly.\n   * When the provided credential expires, a new credential, using the\n   * external account options, is retrieved.\n   * @param credentials The Credentials object to set on the current client.\n   */\n\n\n  _createClass(BaseExternalAccountClient, [{\n    key: \"setCredentials\",\n    value: function setCredentials(credentials) {\n      _get(_getPrototypeOf(BaseExternalAccountClient.prototype), \"setCredentials\", this).call(this, credentials);\n\n      this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.cachedAccessToken || this.isExpired(this.cachedAccessToken))) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.refreshAccessTokenAsync();\n\n              case 3:\n                return _context.abrupt(\"return\", {\n                  token: this.cachedAccessToken.access_token,\n                  res: this.cachedAccessToken.res\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }()\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint> being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accessTokenResponse, headers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getAccessToken();\n\n              case 2:\n                accessTokenResponse = _context2.sent;\n                headers = {\n                  Authorization: \"Bearer \".concat(accessTokenResponse.token)\n                };\n                return _context2.abrupt(\"return\", this.addSharedMetadataHeaders(headers));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRequestHeaders() {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n\n      return getRequestHeaders;\n    }()\n  }, {\n    key: \"request\",\n    value: function request(opts, callback) {\n      if (callback) {\n        this.requestAsync(opts).then(function (r) {\n          return callback(null, r);\n        }, function (e) {\n          return callback(e, e.response);\n        });\n      } else {\n        return this.requestAsync(opts);\n      }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool. When not determinable, this resolves with\n     *   null.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n\n  }, {\n    key: \"getProjectId\",\n    value: function () {\n      var _getProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.projectId) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.projectId);\n\n              case 4:\n                if (!this.projectNumber) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                _context3.next = 7;\n                return this.getRequestHeaders();\n\n              case 7:\n                headers = _context3.sent;\n                _context3.next = 10;\n                return this.transporter.request({\n                  headers: headers,\n                  url: \"\".concat(exports.CLOUD_RESOURCE_MANAGER).concat(this.projectNumber),\n                  responseType: 'json'\n                });\n\n              case 10:\n                response = _context3.sent;\n                this.projectId = response.data.projectId;\n                return _context3.abrupt(\"return\", this.projectId);\n\n              case 13:\n                return _context3.abrupt(\"return\", null);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getProjectId() {\n        return _getProjectId.apply(this, arguments);\n      }\n\n      return getProjectId;\n    }()\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n\n  }, {\n    key: \"requestAsync\",\n    value: function () {\n      var _requestAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts) {\n        var retry,\n            response,\n            requestHeaders,\n            res,\n            statusCode,\n            isReadableStream,\n            isAuthErr,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                retry = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.getRequestHeaders();\n\n              case 4:\n                requestHeaders = _context4.sent;\n                opts.headers = opts.headers || {};\n\n                if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                  opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n                }\n\n                if (requestHeaders && requestHeaders.Authorization) {\n                  opts.headers.Authorization = requestHeaders.Authorization;\n                }\n\n                _context4.next = 10;\n                return this.transporter.request(opts);\n\n              case 10:\n                response = _context4.sent;\n                _context4.next = 27;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                res = _context4.t0.response;\n\n                if (!res) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n\n                isReadableStream = res.config.data instanceof stream.Readable;\n                isAuthErr = statusCode === 401 || statusCode === 403;\n\n                if (!(!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure)) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                _context4.next = 23;\n                return this.refreshAccessTokenAsync();\n\n              case 23:\n                _context4.next = 25;\n                return this.requestAsync(opts, true);\n\n              case 25:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 26:\n                throw _context4.t0;\n\n              case 27:\n                return _context4.abrupt(\"return\", response);\n\n              case 28:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n\n      function requestAsync(_x) {\n        return _requestAsync.apply(this, arguments);\n      }\n\n      return requestAsync;\n    }()\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n\n  }, {\n    key: \"refreshAccessTokenAsync\",\n    value: function () {\n      var _refreshAccessTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var subjectToken, stsCredentialsOptions, stsResponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.retrieveSubjectToken();\n\n              case 2:\n                subjectToken = _context5.sent;\n                // Construct the STS credentials options.\n                stsCredentialsOptions = {\n                  grantType: STS_GRANT_TYPE,\n                  audience: this.audience,\n                  requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n                  subjectToken: subjectToken,\n                  subjectTokenType: this.subjectTokenType,\n                  // generateAccessToken requires the provided access token to have\n                  // scopes:\n                  // https://www.googleapis.com/auth/iam or\n                  // https://www.googleapis.com/auth/cloud-platform\n                  // The new service account access token scopes will match the user\n                  // provided ones.\n                  scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n                }; // Exchange the external credentials for a GCP access token.\n\n                _context5.next = 6;\n                return this.stsCredential.exchangeToken(stsCredentialsOptions);\n\n              case 6:\n                stsResponse = _context5.sent;\n\n                if (!this.serviceAccountImpersonationUrl) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                _context5.next = 10;\n                return this.getImpersonatedAccessToken(stsResponse.access_token);\n\n              case 10:\n                this.cachedAccessToken = _context5.sent;\n                _context5.next = 14;\n                break;\n\n              case 13:\n                // Save response in cached access token.\n                this.cachedAccessToken = {\n                  access_token: stsResponse.access_token,\n                  expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                  res: stsResponse.res\n                };\n\n              case 14:\n                // Save credentials.\n                this.credentials = {};\n                Object.assign(this.credentials, this.cachedAccessToken);\n                delete this.credentials.res; // Trigger tokens event to notify external listeners.\n\n                this.emit('tokens', {\n                  refresh_token: null,\n                  expiry_date: this.cachedAccessToken.expiry_date,\n                  access_token: this.cachedAccessToken.access_token,\n                  token_type: 'Bearer',\n                  id_token: null\n                }); // Return the cached access token.\n\n                return _context5.abrupt(\"return\", this.cachedAccessToken);\n\n              case 19:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function refreshAccessTokenAsync() {\n        return _refreshAccessTokenAsync.apply(this, arguments);\n      }\n\n      return refreshAccessTokenAsync;\n    }()\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n\n  }, {\n    key: \"getProjectNumber\",\n    value: function getProjectNumber(audience) {\n      // STS audience pattern:\n      // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n      var match = audience.match(/\\/projects\\/([^/]+)/);\n\n      if (!match) {\n        return null;\n      }\n\n      return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n\n  }, {\n    key: \"getImpersonatedAccessToken\",\n    value: function () {\n      var _getImpersonatedAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(token) {\n        var opts, response, successResponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                opts = {\n                  url: this.serviceAccountImpersonationUrl,\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: \"Bearer \".concat(token)\n                  },\n                  data: {\n                    scope: this.getScopesArray()\n                  },\n                  responseType: 'json'\n                };\n                _context6.next = 3;\n                return this.transporter.request(opts);\n\n              case 3:\n                response = _context6.sent;\n                successResponse = response.data;\n                return _context6.abrupt(\"return\", {\n                  access_token: successResponse.accessToken,\n                  // Convert from ISO format to timestamp.\n                  expiry_date: new Date(successResponse.expireTime).getTime(),\n                  res: response\n                });\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getImpersonatedAccessToken(_x2) {\n        return _getImpersonatedAccessToken.apply(this, arguments);\n      }\n\n      return getImpersonatedAccessToken;\n    }()\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(accessToken) {\n      var now = new Date().getTime();\n      return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n\n  }, {\n    key: \"getScopesArray\",\n    value: function getScopesArray() {\n      // Since scopes can be provided as string or array, the type should\n      // be normalized.\n      if (typeof this.scopes === 'string') {\n        return [this.scopes];\n      } else if (typeof this.scopes === 'undefined') {\n        return [DEFAULT_OAUTH_SCOPE];\n      } else {\n        return this.scopes;\n      }\n    }\n  }]);\n\n  return BaseExternalAccountClient;\n}(authclient_1.AuthClient);\n\nexports.BaseExternalAccountClient = BaseExternalAccountClient;","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"],"names":["Object","defineProperty","exports","value","BaseExternalAccountClient","CLOUD_RESOURCE_MANAGER","EXTERNAL_ACCOUNT_TYPE","EXPIRATION_TIME_OFFSET","stream","require","authclient_1","sts","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","DEFAULT_OAUTH_SCOPE","options","additionalOptions","type","Error","clientAuth","client_id","confidentialClientType","clientId","clientSecret","client_secret","undefined","stsCredential","StsCredentials","token_url","scopes","cachedAccessToken","audience","subjectTokenType","subject_token_type","quotaProjectId","quota_project_id","serviceAccountImpersonationUrl","service_account_impersonation_url","eagerRefreshThresholdMillis","forceRefreshOnFailure","projectId","projectNumber","getProjectNumber","credentials","isExpired","refreshAccessTokenAsync","token","access_token","res","getAccessToken","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","opts","callback","requestAsync","then","r","e","response","getRequestHeaders","transporter","request","url","responseType","data","retry","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","retrieveSubjectToken","subjectToken","stsCredentialsOptions","grantType","requestedTokenType","scope","getScopesArray","exchangeToken","stsResponse","getImpersonatedAccessToken","expiry_date","Date","getTime","expires_in","assign","emit","refresh_token","token_type","id_token","match","method","successResponse","accessToken","expireTime","now","AuthClient"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super();\n        if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\n                `received \"${options.type}\"`);\n        }\n        const clientAuth = options.client_id\n            ? {\n                confidentialClientType: 'basic',\n                clientId: options.client_id,\n                clientSecret: options.client_secret,\n            }\n            : undefined;\n        this.stsCredential = new sts.StsCredentials(options.token_url, clientAuth);\n        // Default OAuth scope. This could be overridden via public property.\n        this.scopes = [DEFAULT_OAUTH_SCOPE];\n        this.cachedAccessToken = null;\n        this.audience = options.audience;\n        this.subjectTokenType = options.subject_token_type;\n        this.quotaProjectId = options.quota_project_id;\n        this.serviceAccountImpersonationUrl =\n            options.service_account_impersonation_url;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n        this.projectId = null;\n        this.projectNumber = this.getProjectNumber(this.audience);\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint> being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool. When not determinable, this resolves with\n     *   null.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n    async getProjectId() {\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        }\n        else if (this.projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                headers,\n                url: `${exports.CLOUD_RESOURCE_MANAGER}${this.projectNumber}`,\n                responseType: 'json',\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n    async refreshAccessTokenAsync() {\n        // Retrieve the external credential.\n        const subjectToken = await this.retrieveSubjectToken();\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            audience: this.audience,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken,\n            subjectTokenType: this.subjectTokenType,\n            // generateAccessToken requires the provided access token to have\n            // scopes:\n            // https://www.googleapis.com/auth/iam or\n            // https://www.googleapis.com/auth/cloud-platform\n            // The new service account access token scopes will match the user\n            // provided ones.\n            scope: this.serviceAccountImpersonationUrl\n                ? [DEFAULT_OAUTH_SCOPE]\n                : this.getScopesArray(),\n        };\n        // Exchange the external credentials for a GCP access token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions);\n        if (this.serviceAccountImpersonationUrl) {\n            this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n        }\n        else {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                res: stsResponse.res,\n            };\n        }\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedAccessToken.expiry_date,\n            access_token: this.cachedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n    getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n    async getImpersonatedAccessToken(token) {\n        const opts = {\n            url: this.serviceAccountImpersonationUrl,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            data: {\n                scope: this.getScopesArray(),\n            },\n            responseType: 'json',\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response,\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n    getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === 'string') {\n            return [this.scopes];\n        }\n        else if (typeof this.scopes === 'undefined') {\n            return [DEFAULT_OAUTH_SCOPE];\n        }\n        else {\n            return this.scopes;\n        }\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n//# sourceMappingURL=baseexternalclient.js.map"]},"metadata":{},"sourceType":"script"}