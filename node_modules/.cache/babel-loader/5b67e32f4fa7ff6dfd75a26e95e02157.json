{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nvar fs = require('fs');\n\nvar MurmurHash3 = require('imurmurhash');\n\nvar onExit = require('signal-exit');\n\nvar path = require('path');\n\nvar isTypedArray = require('is-typedarray');\n\nvar typedArrayToBuffer = require('typedarray-to-buffer');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nvar threadId = function getId() {\n  try {\n    var workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nvar invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(function (resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  });\n} // https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\n\n\nfunction isChownErrOk(err) {\n  if (err.code === 'ENOSYS') {\n    return true;\n  }\n\n  var nonroot = !process.getuid || process.getuid() !== 0;\n\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFileAsync(_x, _x2) {\n  return _writeFileAsync.apply(this, arguments);\n}\n\nfunction _writeFileAsync() {\n  _writeFileAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename, data) {\n    var options,\n        fd,\n        tmpfile,\n        removeOnExitHandler,\n        absoluteName,\n        truename,\n        stats,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n            if (typeof options === 'string') {\n              options = {\n                encoding: options\n              };\n            }\n\n            /* istanbul ignore next -- The closure only gets called when onExit triggers */\n            removeOnExitHandler = onExit(cleanupOnExit(function () {\n              return tmpfile;\n            }));\n            absoluteName = path.resolve(filename);\n            _context.prev = 4;\n            _context.next = 7;\n            return serializeActiveFile(absoluteName);\n\n          case 7:\n            _context.next = 9;\n            return promisify(fs.realpath)(filename).catch(function () {\n              return filename;\n            });\n\n          case 9:\n            truename = _context.sent;\n            tmpfile = getTmpname(truename);\n\n            if (!(!options.mode || !options.chown)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 14;\n            return promisify(fs.stat)(truename).catch(function () {});\n\n          case 14:\n            stats = _context.sent;\n\n            if (stats) {\n              if (options.mode == null) {\n                options.mode = stats.mode;\n              }\n\n              if (options.chown == null && process.getuid) {\n                options.chown = {\n                  uid: stats.uid,\n                  gid: stats.gid\n                };\n              }\n            }\n\n          case 16:\n            _context.next = 18;\n            return promisify(fs.open)(tmpfile, 'w', options.mode);\n\n          case 18:\n            fd = _context.sent;\n\n            if (!options.tmpfileCreated) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return options.tmpfileCreated(tmpfile);\n\n          case 22:\n            if (isTypedArray(data)) {\n              data = typedArrayToBuffer(data);\n            }\n\n            if (!Buffer.isBuffer(data)) {\n              _context.next = 28;\n              break;\n            }\n\n            _context.next = 26;\n            return promisify(fs.write)(fd, data, 0, data.length, 0);\n\n          case 26:\n            _context.next = 31;\n            break;\n\n          case 28:\n            if (!(data != null)) {\n              _context.next = 31;\n              break;\n            }\n\n            _context.next = 31;\n            return promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n\n          case 31:\n            if (!(options.fsync !== false)) {\n              _context.next = 34;\n              break;\n            }\n\n            _context.next = 34;\n            return promisify(fs.fsync)(fd);\n\n          case 34:\n            _context.next = 36;\n            return promisify(fs.close)(fd);\n\n          case 36:\n            fd = null;\n\n            if (!options.chown) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n\n          case 40:\n            if (!options.mode) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return promisify(fs.chmod)(tmpfile, options.mode).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n\n          case 43:\n            _context.next = 45;\n            return promisify(fs.rename)(tmpfile, truename);\n\n          case 45:\n            _context.prev = 45;\n\n            if (!fd) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return promisify(fs.close)(fd).catch(\n            /* istanbul ignore next */\n            function () {});\n\n          case 49:\n            removeOnExitHandler();\n            _context.next = 52;\n            return promisify(fs.unlink)(tmpfile).catch(function () {});\n\n          case 52:\n            activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n            if (activeFiles[absoluteName].length > 0) {\n              activeFiles[absoluteName][0](); // start next job if one is pending\n            } else delete activeFiles[absoluteName];\n\n            return _context.finish(45);\n\n          case 55:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 45, 55]]);\n  }));\n  return _writeFileAsync.apply(this, arguments);\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n\n  var promise = writeFileAsync(filename, data, options);\n\n  if (callback) {\n    promise.then(callback, callback);\n  }\n\n  return promise;\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  var tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      var stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  var fd;\n  var cleanup = cleanupOnExit(tmpfile);\n  var removeOnExitHandler = onExit(cleanup);\n  var threw = true;\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 438);\n\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    fd = null;\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename);\n    threw = false;\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n\n    if (threw) {\n      cleanup();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/write-file-atomic/index.js"],"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","_cleanupOnExit","cleanupOnExit","fs","require","MurmurHash3","onExit","path","isTypedArray","typedArrayToBuffer","promisify","activeFiles","threadId","getId","workerThreads","e","invocations","filename","__filename","hash","String","process","pid","result","tmpfile","unlinkSync","_","serializeActiveFile","absoluteName","Promise","resolve","push","length","isChownErrOk","err","code","nonroot","getuid","writeFileAsync","data","options","encoding","removeOnExitHandler","realpath","catch","truename","mode","chown","stat","stats","uid","gid","open","fd","tmpfileCreated","Buffer","isBuffer","write","fsync","close","chmod","rename","unlink","shift","callback","Function","promise","then","realpathSync","ex","statSync","Object","assign","cleanup","threw","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit\n\nconst fs = require('fs')\nconst MurmurHash3 = require('imurmurhash')\nconst onExit = require('signal-exit')\nconst path = require('path')\nconst isTypedArray = require('is-typedarray')\nconst typedArrayToBuffer = require('typedarray-to-buffer')\nconst { promisify } = require('util')\nconst activeFiles = {}\n\n// if we run inside of a worker_thread, `process.pid` is not unique\n/* istanbul ignore next */\nconst threadId = (function getId () {\n  try {\n    const workerThreads = require('worker_threads')\n\n    /// if we are in main thread, this is set to `0`\n    return workerThreads.threadId\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0\n  }\n})()\n\nlet invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(threadId))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction cleanupOnExit (tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)\n    } catch (_) {}\n  }\n}\n\nfunction serializeActiveFile (absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = []\n\n    activeFiles[absoluteName].push(resolve) // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) resolve() // kick off the first one\n  })\n}\n\n// https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\nfunction isChownErrOk (err) {\n  if (err.code === 'ENOSYS') {\n    return true\n  }\n\n  const nonroot = !process.getuid || process.getuid() !== 0\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true\n    }\n  }\n\n  return false\n}\n\nasync function writeFileAsync (filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  let fd\n  let tmpfile\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile))\n  const absoluteName = path.resolve(filename)\n\n  try {\n    await serializeActiveFile(absoluteName)\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename)\n    tmpfile = getTmpname(truename)\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {})\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode)\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile)\n    }\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data)\n    }\n    if (Buffer.isBuffer(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd)\n    }\n\n    await promisify(fs.close)(fd)\n    fd = null\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    await promisify(fs.rename)(tmpfile, truename)\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n        /* istanbul ignore next */\n        () => {}\n      )\n    }\n    removeOnExitHandler()\n    await promisify(fs.unlink)(tmpfile).catch(() => {})\n    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0]() // start next job if one is pending\n    } else delete activeFiles[absoluteName]\n  }\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = {}\n  }\n\n  const promise = writeFileAsync(filename, data, options)\n  if (callback) {\n    promise.then(callback, callback)\n  }\n\n  return promise\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (typeof options === 'string') options = { encoding: options }\n  else if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  const tmpfile = getTmpname(filename)\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename)\n      options = Object.assign({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n    } catch (ex) {\n      // ignore stat errors\n    }\n  }\n\n  let fd\n  const cleanup = cleanupOnExit(tmpfile)\n  const removeOnExitHandler = onExit(cleanup)\n\n  let threw = true\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 0o666)\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile)\n    }\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data)\n    }\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n\n    fs.closeSync(fd)\n    fd = null\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename)\n    threw = false\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd)\n      } catch (ex) {\n        // ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n    removeOnExitHandler()\n    if (threw) {\n      cleanup()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}