{"ast":null,"code":"\"use strict\"; // Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/operation\n */\n\nvar service_object_1 = require(\"./service-object\");\n\nvar util_1 = require(\"util\"); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar Operation = /*#__PURE__*/function (_service_object_1$Ser) {\n  _inherits(Operation, _service_object_1$Ser);\n\n  var _super = _createSuper(Operation);\n\n  /**\n   * An Operation object allows you to interact with APIs that take longer to\n   * process things.\n   *\n   * @constructor\n   * @alias module:common/operation\n   *\n   * @param {object} config - Configuration object.\n   * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n   */\n  function Operation(config) {\n    var _this;\n\n    _classCallCheck(this, Operation);\n\n    var methods = {\n      /**\n       * Checks to see if an operation exists.\n       */\n      exists: true,\n\n      /**\n       * Retrieves the operation.\n       */\n      get: true,\n\n      /**\n       * Retrieves metadata for the operation.\n       */\n      getMetadata: {\n        reqOpts: {\n          name: config.id\n        }\n      }\n    };\n    config = Object.assign({\n      baseUrl: ''\n    }, config); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    config.methods = config.methods || methods;\n    _this = _super.call(this, config);\n    _this.completeListeners = 0;\n    _this.hasActiveListeners = false;\n\n    _this.listenForEvents_();\n\n    return _this;\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {Promise}\n   */\n\n\n  _createClass(Operation, [{\n    key: \"promise\",\n    value: function promise() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.on('error', reject).on('complete', function (metadata) {\n          resolve([metadata]);\n        });\n      });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"listenForEvents_\",\n    value: function listenForEvents_() {\n      var _this3 = this;\n\n      this.on('newListener', function (event) {\n        if (event === 'complete') {\n          _this3.completeListeners++;\n\n          if (!_this3.hasActiveListeners) {\n            _this3.hasActiveListeners = true;\n\n            _this3.startPolling_();\n          }\n        }\n      });\n      this.on('removeListener', function (event) {\n        if (event === 'complete' && --_this3.completeListeners === 0) {\n          _this3.hasActiveListeners = false;\n        }\n      });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"poll_\",\n    value: function poll_(callback) {\n      this.getMetadata(function (err, body) {\n        if (err || body.error) {\n          callback(err || body.error);\n          return;\n        }\n\n        if (!body.done) {\n          callback(null);\n          return;\n        }\n\n        callback(null, body);\n      });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"startPolling_\",\n    value: function () {\n      var _startPolling_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var metadata;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.hasActiveListeners) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return util_1.promisify(this.poll_.bind(this))();\n\n              case 5:\n                metadata = _context.sent;\n\n                if (metadata) {\n                  _context.next = 9;\n                  break;\n                }\n\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n                return _context.abrupt(\"return\");\n\n              case 9:\n                this.emit('complete', metadata);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                this.emit('error', _context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 12]]);\n      }));\n\n      function startPolling_() {\n        return _startPolling_.apply(this, arguments);\n      }\n\n      return startPolling_;\n    }()\n  }]);\n\n  return Operation;\n}(service_object_1.ServiceObject);\n\nexports.Operation = Operation;","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/common/build/src/operation.js"],"names":["Object","defineProperty","exports","value","service_object_1","require","util_1","Operation","config","methods","exists","get","getMetadata","reqOpts","name","id","assign","baseUrl","completeListeners","hasActiveListeners","listenForEvents_","Promise","resolve","reject","on","metadata","event","startPolling_","callback","err","body","error","done","promisify","poll_","bind","setTimeout","pollIntervalMs","emit","ServiceObject"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/operation\n */\nconst service_object_1 = require(\"./service-object\");\nconst util_1 = require(\"util\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Operation extends service_object_1.ServiceObject {\n    /**\n     * An Operation object allows you to interact with APIs that take longer to\n     * process things.\n     *\n     * @constructor\n     * @alias module:common/operation\n     *\n     * @param {object} config - Configuration object.\n     * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n     */\n    constructor(config) {\n        const methods = {\n            /**\n             * Checks to see if an operation exists.\n             */\n            exists: true,\n            /**\n             * Retrieves the operation.\n             */\n            get: true,\n            /**\n             * Retrieves metadata for the operation.\n             */\n            getMetadata: {\n                reqOpts: {\n                    name: config.id,\n                },\n            },\n        };\n        config = Object.assign({\n            baseUrl: '',\n        }, config);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        config.methods = (config.methods || methods);\n        super(config);\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.listenForEvents_();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {Promise}\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (metadata) => {\n                resolve([metadata]);\n            });\n        });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    listenForEvents_() {\n        this.on('newListener', (event) => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', (event) => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n    poll_(callback) {\n        this.getMetadata((err, body) => {\n            if (err || body.error) {\n                callback(err || body.error);\n                return;\n            }\n            if (!body.done) {\n                callback(null);\n                return;\n            }\n            callback(null, body);\n        });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    async startPolling_() {\n        if (!this.hasActiveListeners) {\n            return;\n        }\n        try {\n            const metadata = await util_1.promisify(this.poll_.bind(this))();\n            if (!metadata) {\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n                return;\n            }\n            this.emit('complete', metadata);\n        }\n        catch (err) {\n            this.emit('error', err);\n        }\n    }\n}\nexports.Operation = Operation;\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"script"}