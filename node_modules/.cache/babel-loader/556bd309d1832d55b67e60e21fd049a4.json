{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar document_1 = require(\"./document\");\n\nvar logger_1 = require(\"./logger\");\n\nvar path_1 = require(\"./path\");\n\nvar reference_1 = require(\"./reference\");\n\nvar serializer_1 = require(\"./serializer\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar google_gax_1 = require(\"google-gax\");\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class WriteResult\n */\n\n\nvar WriteResult = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   *\n   * @param _writeTime The time of the corresponding document write.\n   */\n  function WriteResult(_writeTime) {\n    _classCallCheck(this, WriteResult);\n\n    this._writeTime = _writeTime;\n  }\n  /**\n   * The write time as set by the Firestore servers.\n   *\n   * @type {Timestamp}\n   * @name WriteResult#writeTime\n   * @readonly\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({foo: 'bar'}).then(writeResult => {\n   *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n   * });\n   */\n\n\n  _createClass(WriteResult, [{\n    key: \"writeTime\",\n    get: function get() {\n      return this._writeTime;\n    }\n    /**\n     * Returns true if this `WriteResult` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `WriteResult` is equal to the provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof WriteResult && this._writeTime.isEqual(other._writeTime);\n    }\n  }]);\n\n  return WriteResult;\n}();\n\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class WriteBatch\n */\n\nvar WriteBatch = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   */\n  function WriteBatch(firestore) {\n    _classCallCheck(this, WriteBatch);\n\n    /**\n     * An array of document paths and the corresponding write operations that are\n     * executed as part of the commit. The resulting `api.IWrite` will be sent to\n     * the backend.\n     *\n     * @private\n     */\n    this._ops = [];\n    this._committed = false;\n    this._firestore = firestore;\n    this._serializer = new serializer_1.Serializer(firestore);\n    this._allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\n   * The number of writes in this batch.\n   */\n\n\n  _createClass(WriteBatch, [{\n    key: \"_opCount\",\n    get: function get() {\n      return this._ops.length;\n    }\n    /**\n     * Checks if this write batch has any pending operations.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this._ops.length === 0;\n    }\n    /**\n     * Throws an error if this batch has already been committed.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"verifyNotCommitted\",\n    value: function verifyNotCommitted() {\n      if (this._committed) {\n        throw new Error('Cannot modify a WriteBatch that has been committed.');\n      }\n    }\n    /**\n     * Create a document with the provided object values. This will fail the batch\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * writeBatch.create(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(documentRef, data) {\n      var _this = this;\n\n      var ref = reference_1.validateDocumentReference('documentRef', documentRef);\n\n      var firestoreData = ref._converter.toFirestore(data);\n\n      validateDocumentData('data', firestoreData,\n      /* allowDeletes= */\n      false, this._allowUndefined);\n      this.verifyNotCommitted();\n      var transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n      transform.validate();\n      var precondition = new document_1.Precondition({\n        exists: false\n      });\n\n      var op = function op() {\n        var document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n        var write = document.toWriteProto();\n\n        if (!transform.isEmpty) {\n          write.updateTransforms = transform.toProto(_this._serializer);\n        }\n\n        write.currentDocument = precondition.toProto();\n        return write;\n      };\n\n      this._ops.push({\n        docPath: documentRef.path,\n        op: op\n      });\n\n      return this;\n    }\n    /**\n     * Deletes a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.delete(documentRef);\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef, precondition) {\n      var ref = reference_1.validateDocumentReference('documentRef', documentRef);\n      validateDeletePrecondition('precondition', precondition, {\n        optional: true\n      });\n      this.verifyNotCommitted();\n      var conditions = new document_1.Precondition(precondition);\n\n      var op = function op() {\n        var write = {\n          delete: ref.formattedName\n        };\n\n        if (!conditions.isEmpty) {\n          write.currentDocument = conditions.toProto();\n        }\n\n        return write;\n      };\n\n      this._ops.push({\n        docPath: documentRef.path,\n        op: op\n      });\n\n      return this;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions},\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      var _this2 = this;\n\n      validateSetOptions('options', options, {\n        optional: true\n      });\n      var mergeLeaves = options && options.merge === true;\n      var mergePaths = options && options.mergeFields;\n      var ref = reference_1.validateDocumentReference('documentRef', documentRef);\n      var firestoreData;\n\n      if (mergeLeaves || mergePaths) {\n        // Cast to any in order to satisfy the union type constraint on\n        // toFirestore().\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        firestoreData = ref._converter.toFirestore(data, options);\n      } else {\n        firestoreData = ref._converter.toFirestore(data);\n      }\n\n      validateDocumentData('data', firestoreData,\n      /* allowDeletes= */\n      !!(mergePaths || mergeLeaves), this._allowUndefined);\n      this.verifyNotCommitted();\n      var documentMask;\n\n      if (mergePaths) {\n        documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n        firestoreData = documentMask.applyTo(firestoreData);\n      }\n\n      var transform = document_1.DocumentTransform.fromObject(documentRef, firestoreData);\n      transform.validate();\n\n      var op = function op() {\n        var document = document_1.DocumentSnapshot.fromObject(documentRef, firestoreData);\n\n        if (mergePaths) {\n          documentMask.removeFields(transform.fields);\n        } else if (mergeLeaves) {\n          documentMask = document_1.DocumentMask.fromObject(firestoreData);\n        }\n\n        var write = document.toWriteProto();\n\n        if (!transform.isEmpty) {\n          write.updateTransforms = transform.toProto(_this2._serializer);\n        }\n\n        if (mergePaths || mergeLeaves) {\n          write.updateMask = documentMask.toProto();\n        }\n\n        return write;\n      };\n\n      this._ops.push({\n        docPath: documentRef.path,\n        op: op\n      });\n\n      return this;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * doesn't yet exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to restrict this update.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.update(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(documentRef, dataOrField) {\n      var _this3 = this;\n\n      for (var _len = arguments.length, preconditionOrValues = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        preconditionOrValues[_key - 2] = arguments[_key];\n      }\n\n      // eslint-disable-next-line prefer-rest-params\n      validate_1.validateMinNumberOfArguments('WriteBatch.update', arguments, 2);\n      reference_1.validateDocumentReference('documentRef', documentRef);\n      this.verifyNotCommitted();\n      var updateMap = new Map();\n      var precondition = new document_1.Precondition({\n        exists: true\n      });\n      var argumentError = 'Update() requires either a single JavaScript ' + 'object or an alternating list of field/value pairs that can be ' + 'followed by an optional precondition.';\n      var usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n\n      if (usesVarargs) {\n        var argumentOffset = 1; // Respect 'documentRef' in the error message\n\n        var fieldOrValues = [dataOrField].concat(preconditionOrValues);\n\n        try {\n          for (var i = 0; i < fieldOrValues.length; i += 2) {\n            if (i === fieldOrValues.length - 1) {\n              var maybePrecondition = fieldOrValues[i];\n              validateUpdatePrecondition(i + argumentOffset, maybePrecondition);\n              precondition = new document_1.Precondition(maybePrecondition);\n            } else {\n              var maybeFieldPath = fieldOrValues[i];\n              path_1.validateFieldPath(i + argumentOffset, maybeFieldPath); // Unlike the `validateMinNumberOfArguments` invocation above, this\n              // validation can be triggered both from `WriteBatch.update()` and\n              // `DocumentReference.update()`. Hence, we don't use the fully\n              // qualified API name in the error message.\n\n              validate_1.validateMinNumberOfArguments('update', fieldOrValues, i + 1);\n              var fieldPath = path_1.FieldPath.fromArgument(maybeFieldPath);\n              validateFieldValue(i + argumentOffset, fieldOrValues[i + 1], this._allowUndefined, fieldPath);\n              updateMap.set(fieldPath, fieldOrValues[i + 1]);\n            }\n          }\n        } catch (err) {\n          logger_1.logger('WriteBatch.update', null, 'Varargs validation failed:', err); // We catch the validation error here and re-throw to provide a better\n          // error message.\n\n          throw new Error(\"\".concat(argumentError, \" \").concat(err.message));\n        }\n      } else {\n        try {\n          validateUpdateMap('dataOrField', dataOrField, this._allowUndefined); // eslint-disable-next-line prefer-rest-params\n\n          validate_1.validateMaxNumberOfArguments('update', arguments, 3);\n          var data = dataOrField;\n          Object.entries(data).forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n\n            // Skip `undefined` values (can be hit if `ignoreUndefinedProperties`\n            // is set)\n            if (value !== undefined) {\n              path_1.validateFieldPath(key, key);\n              updateMap.set(path_1.FieldPath.fromArgument(key), value);\n            }\n          });\n\n          if (preconditionOrValues.length > 0) {\n            validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n            precondition = new document_1.Precondition(preconditionOrValues[0]);\n          }\n        } catch (err) {\n          logger_1.logger('WriteBatch.update', null, 'Non-varargs validation failed:', err); // We catch the validation error here and prefix the error with a custom\n          // message to describe the usage of update() better.\n\n          throw new Error(\"\".concat(argumentError, \" \").concat(err.message));\n        }\n      }\n\n      validateNoConflictingFields('dataOrField', updateMap);\n      var transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n      transform.validate();\n      var documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n\n      var op = function op() {\n        var document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n        var write = document.toWriteProto();\n        write.updateMask = documentMask.toProto();\n\n        if (!transform.isEmpty) {\n          write.updateTransforms = transform.toProto(_this3._serializer);\n        }\n\n        write.currentDocument = precondition.toProto();\n        return write;\n      };\n\n      this._ops.push({\n        docPath: documentRef.path,\n        op: op\n      });\n\n      return this;\n    }\n    /**\n     * Atomically commits all pending operations to the database and verifies all\n     * preconditions. Fails the entire write if any precondition is not met.\n     *\n     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n     * when this batch completes.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      // Capture the error stack to preserve stack tracing across async calls.\n      var stack = Error().stack; // Commits should also be retried when they fail with status code ABORTED.\n\n      var retryCodes = [google_gax_1.Status.ABORTED].concat(_toConsumableArray(util_1.getRetryCodes('commit')));\n      return this._commit({\n        retryCodes: retryCodes\n      }).then(function (response) {\n        return (response.writeResults || []).map(function (writeResult) {\n          return new WriteResult(timestamp_1.Timestamp.fromProto(writeResult.updateTime || response.commitTime));\n        });\n      }).catch(function (err) {\n        throw util_1.wrapError(err, stack);\n      });\n    }\n    /**\n     * Commit method that takes an optional transaction ID.\n     *\n     * @private\n     * @param commitOptions Options to use for this commit.\n     * @param commitOptions.transactionId The transaction ID of this commit.\n     * @param commitOptions.requestTag A unique client-assigned identifier for\n     * this request.\n     * @returns  A Promise that resolves when this batch completes.\n     */\n\n  }, {\n    key: \"_commit\",\n    value: function () {\n      var _commit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(commitOptions) {\n        var _a, tag, request;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Note: We don't call `verifyNotCommitted()` to allow for retries.\n                this._committed = true;\n                tag = (_a = commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.requestTag) !== null && _a !== void 0 ? _a : util_1.requestTag();\n                _context.next = 4;\n                return this._firestore.initializeIfNeeded(tag);\n\n              case 4:\n                // Note that the request may not always be of type ICommitRequest. This is\n                // just here to ensure type safety.\n                request = {\n                  database: this._firestore.formattedName,\n                  writes: this._ops.map(function (op) {\n                    return op.op();\n                  })\n                };\n\n                if (commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.transactionId) {\n                  request.transaction = commitOptions.transactionId;\n                }\n\n                logger_1.logger('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n                return _context.abrupt(\"return\", this._firestore.request((commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.methodName) || 'commit', request, tag, commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.retryCodes));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _commit(_x) {\n        return _commit2.apply(this, arguments);\n      }\n\n      return _commit;\n    }()\n    /**\n     * Resets the WriteBatch and dequeues all pending operations.\n     * @private\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this._ops.splice(0);\n\n      this._committed = false;\n    }\n  }]);\n\n  return WriteBatch;\n}();\n\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param allowExists Whether to allow the 'exists' preconditions.\n */\n\nfunction validatePrecondition(arg, value, allowExists) {\n  if (typeof value !== 'object' || value === null) {\n    throw new Error('Input is not an object.');\n  }\n\n  var precondition = value;\n  var conditions = 0;\n\n  if (precondition.exists !== undefined) {\n    ++conditions;\n\n    if (!allowExists) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'precondition'), \" \\\"exists\\\" is not an allowed precondition.\"));\n    }\n\n    if (typeof precondition.exists !== 'boolean') {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'precondition'), \" \\\"exists\\\" is not a boolean.'\"));\n    }\n  }\n\n  if (precondition.lastUpdateTime !== undefined) {\n    ++conditions;\n\n    if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'precondition'), \" \\\"lastUpdateTime\\\" is not a Firestore Timestamp.\"));\n    }\n  }\n\n  if (conditions > 1) {\n    throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'precondition'), \" Input specifies more than one precondition.\"));\n  }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\n\n\nfunction validateUpdatePrecondition(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    validatePrecondition(arg, value,\n    /* allowExists= */\n    false);\n  }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\n\n\nfunction validateDeletePrecondition(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    validatePrecondition(arg, value,\n    /* allowExists= */\n    true);\n  }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\n\n\nfunction validateSetOptions(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'set() options argument'), \" Input is not an object.\"));\n    }\n\n    var setOptions = value;\n\n    if ('merge' in setOptions && typeof setOptions.merge !== 'boolean') {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'set() options argument'), \" \\\"merge\\\" is not a boolean.\"));\n    }\n\n    if ('mergeFields' in setOptions) {\n      if (!Array.isArray(setOptions.mergeFields)) {\n        throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'set() options argument'), \" \\\"mergeFields\\\" is not an array.\"));\n      }\n\n      for (var i = 0; i < setOptions.mergeFields.length; ++i) {\n        try {\n          path_1.validateFieldPath(i, setOptions.mergeFields[i]);\n        } catch (err) {\n          throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'set() options argument'), \" \\\"mergeFields\\\" is not valid: \").concat(err.message));\n        }\n      }\n    }\n\n    if ('merge' in setOptions && 'mergeFields' in setOptions) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'set() options argument'), \" You cannot specify both \\\"merge\\\" and \\\"mergeFields\\\".\"));\n    }\n  }\n}\n\nexports.validateSetOptions = validateSetOptions;\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\n\nfunction validateDocumentData(arg, obj, allowDeletes, allowUndefined) {\n  if (!util_1.isPlainObject(obj)) {\n    throw new Error(validate_1.customObjectMessage(arg, obj));\n  }\n\n  serializer_1.validateUserInput(arg, obj, 'Firestore document', {\n    allowDeletes: allowDeletes ? 'all' : 'none',\n    allowTransforms: true,\n    allowUndefined: allowUndefined\n  });\n}\n\nexports.validateDocumentData = validateDocumentData;\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @param path The path to show in the error message.\n */\n\nfunction validateFieldValue(arg, val, allowUndefined, path) {\n  serializer_1.validateUserInput(arg, val, 'Firestore value', {\n    allowDeletes: 'root',\n    allowTransforms: true,\n    allowUndefined: allowUndefined\n  }, path);\n}\n\nexports.validateFieldValue = validateFieldValue;\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\n\nfunction validateNoConflictingFields(arg, data) {\n  var fields = [];\n  data.forEach(function (value, key) {\n    fields.push(key);\n  });\n  fields.sort(function (left, right) {\n    return left.compareTo(right);\n  });\n\n  for (var i = 1; i < fields.length; ++i) {\n    if (fields[i - 1].isPrefixOf(fields[i])) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'update map'), \" Field \\\"\").concat(fields[i - 1], \"\\\" was specified multiple times.\"));\n    }\n  }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\n\n\nfunction validateUpdateMap(arg, obj, allowUndefined) {\n  if (!util_1.isPlainObject(obj)) {\n    throw new Error(validate_1.customObjectMessage(arg, obj));\n  }\n\n  if (Object.keys(obj).length === 0) {\n    throw new Error('At least one field must be updated.');\n  }\n\n  validateFieldValue(arg, obj, allowUndefined);\n}","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/firestore/build/src/write-batch.js"],"names":["Object","defineProperty","exports","value","document_1","require","logger_1","path_1","reference_1","serializer_1","timestamp_1","util_1","validate_1","google_gax_1","WriteResult","_writeTime","other","isEqual","WriteBatch","firestore","_ops","_committed","_firestore","_serializer","Serializer","_allowUndefined","_settings","ignoreUndefinedProperties","length","Error","documentRef","data","ref","validateDocumentReference","firestoreData","_converter","toFirestore","validateDocumentData","verifyNotCommitted","transform","DocumentTransform","fromObject","validate","precondition","Precondition","exists","op","document","DocumentSnapshot","write","toWriteProto","isEmpty","updateTransforms","toProto","currentDocument","push","docPath","path","validateDeletePrecondition","optional","conditions","delete","formattedName","options","validateSetOptions","mergeLeaves","merge","mergePaths","mergeFields","documentMask","DocumentMask","fromFieldMask","applyTo","removeFields","fields","updateMask","dataOrField","preconditionOrValues","validateMinNumberOfArguments","arguments","updateMap","Map","argumentError","usesVarargs","FieldPath","argumentOffset","fieldOrValues","i","maybePrecondition","validateUpdatePrecondition","maybeFieldPath","validateFieldPath","fieldPath","fromArgument","validateFieldValue","set","err","logger","message","validateUpdateMap","validateMaxNumberOfArguments","entries","forEach","key","undefined","validateNoConflictingFields","fromUpdateMap","stack","retryCodes","Status","ABORTED","getRetryCodes","_commit","then","response","writeResults","map","writeResult","Timestamp","fromProto","updateTime","commitTime","catch","wrapError","commitOptions","tag","_a","requestTag","initializeIfNeeded","request","database","writes","transactionId","transaction","methodName","splice","validatePrecondition","arg","allowExists","invalidArgumentMessage","lastUpdateTime","validateOptional","isObject","setOptions","Array","isArray","obj","allowDeletes","allowUndefined","isPlainObject","customObjectMessage","validateUserInput","allowTransforms","val","sort","left","right","compareTo","isPrefixOf","keys"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMI,YAAY,GAAGJ,OAAO,CAAC,cAAD,CAA5B;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAMQ,YAAY,GAAGR,OAAO,CAAC,YAAD,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMS,W;AACF;AACJ;AACA;AACA;AACA;AACI,uBAAYC,UAAZ,EAAwB;AAAA;;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;SACI,eAAgB;AACZ,aAAO,KAAKA,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQC,KAAR,EAAe;AACX,aAAQ,SAASA,KAAT,IACHA,KAAK,YAAYF,WAAjB,IACG,KAAKC,UAAL,CAAgBE,OAAhB,CAAwBD,KAAK,CAACD,UAA9B,CAFR;AAGH;;;;;;AAELb,OAAO,CAACY,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;IACMI,U;AACF;AACJ;AACA;AACI,sBAAYC,SAAZ,EAAuB;AAAA;;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,UAAL,GAAkBH,SAAlB;AACA,SAAKI,WAAL,GAAmB,IAAId,YAAY,CAACe,UAAjB,CAA4BL,SAA5B,CAAnB;AACA,SAAKM,eAAL,GAAuB,CAAC,CAACN,SAAS,CAACO,SAAV,CAAoBC,yBAA7C;AACH;AACD;AACJ;AACA;;;;;SACI,eAAe;AACX,aAAO,KAAKP,IAAL,CAAUQ,MAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;SACI,eAAc;AACV,aAAO,KAAKR,IAAL,CAAUQ,MAAV,KAAqB,CAA5B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAqB;AACjB,UAAI,KAAKP,UAAT,EAAqB;AACjB,cAAM,IAAIQ,KAAJ,CAAU,qDAAV,CAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,gBAAOC,WAAP,EAAoBC,IAApB,EAA0B;AAAA;;AACtB,UAAMC,GAAG,GAAGxB,WAAW,CAACyB,yBAAZ,CAAsC,aAAtC,EAAqDH,WAArD,CAAZ;;AACA,UAAMI,aAAa,GAAGF,GAAG,CAACG,UAAJ,CAAeC,WAAf,CAA2BL,IAA3B,CAAtB;;AACAM,MAAAA,oBAAoB,CAAC,MAAD,EAASH,aAAT;AACpB;AAAoB,WADA,EACO,KAAKT,eADZ,CAApB;AAEA,WAAKa,kBAAL;AACA,UAAMC,SAAS,GAAGnC,UAAU,CAACoC,iBAAX,CAA6BC,UAA7B,CAAwCT,GAAxC,EAA6CE,aAA7C,CAAlB;AACAK,MAAAA,SAAS,CAACG,QAAV;AACA,UAAMC,YAAY,GAAG,IAAIvC,UAAU,CAACwC,YAAf,CAA4B;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA5B,CAArB;;AACA,UAAMC,EAAE,GAAG,SAALA,EAAK,GAAM;AACb,YAAMC,QAAQ,GAAG3C,UAAU,CAAC4C,gBAAX,CAA4BP,UAA5B,CAAuCT,GAAvC,EAA4CE,aAA5C,CAAjB;AACA,YAAMe,KAAK,GAAGF,QAAQ,CAACG,YAAT,EAAd;;AACA,YAAI,CAACX,SAAS,CAACY,OAAf,EAAwB;AACpBF,UAAAA,KAAK,CAACG,gBAAN,GAAyBb,SAAS,CAACc,OAAV,CAAkB,KAAI,CAAC9B,WAAvB,CAAzB;AACH;;AACD0B,QAAAA,KAAK,CAACK,eAAN,GAAwBX,YAAY,CAACU,OAAb,EAAxB;AACA,eAAOJ,KAAP;AACH,OARD;;AASA,WAAK7B,IAAL,CAAUmC,IAAV,CAAe;AAAEC,QAAAA,OAAO,EAAE1B,WAAW,CAAC2B,IAAvB;AAA6BX,QAAAA,EAAE,EAAFA;AAA7B,OAAf;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAOhB,WAAP,EAAoBa,YAApB,EAAkC;AAC9B,UAAMX,GAAG,GAAGxB,WAAW,CAACyB,yBAAZ,CAAsC,aAAtC,EAAqDH,WAArD,CAAZ;AACA4B,MAAAA,0BAA0B,CAAC,cAAD,EAAiBf,YAAjB,EAA+B;AAAEgB,QAAAA,QAAQ,EAAE;AAAZ,OAA/B,CAA1B;AACA,WAAKrB,kBAAL;AACA,UAAMsB,UAAU,GAAG,IAAIxD,UAAU,CAACwC,YAAf,CAA4BD,YAA5B,CAAnB;;AACA,UAAMG,EAAE,GAAG,SAALA,EAAK,GAAM;AACb,YAAMG,KAAK,GAAG;AAAEY,UAAAA,MAAM,EAAE7B,GAAG,CAAC8B;AAAd,SAAd;;AACA,YAAI,CAACF,UAAU,CAACT,OAAhB,EAAyB;AACrBF,UAAAA,KAAK,CAACK,eAAN,GAAwBM,UAAU,CAACP,OAAX,EAAxB;AACH;;AACD,eAAOJ,KAAP;AACH,OAND;;AAOA,WAAK7B,IAAL,CAAUmC,IAAV,CAAe;AAAEC,QAAAA,OAAO,EAAE1B,WAAW,CAAC2B,IAAvB;AAA6BX,QAAAA,EAAE,EAAFA;AAA7B,OAAf;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,aAAIhB,WAAJ,EAAiBC,IAAjB,EAAuBgC,OAAvB,EAAgC;AAAA;;AAC5BC,MAAAA,kBAAkB,CAAC,SAAD,EAAYD,OAAZ,EAAqB;AAAEJ,QAAAA,QAAQ,EAAE;AAAZ,OAArB,CAAlB;AACA,UAAMM,WAAW,GAAGF,OAAO,IAAIA,OAAO,CAACG,KAAR,KAAkB,IAAjD;AACA,UAAMC,UAAU,GAAGJ,OAAO,IAAIA,OAAO,CAACK,WAAtC;AACA,UAAMpC,GAAG,GAAGxB,WAAW,CAACyB,yBAAZ,CAAsC,aAAtC,EAAqDH,WAArD,CAAZ;AACA,UAAII,aAAJ;;AACA,UAAI+B,WAAW,IAAIE,UAAnB,EAA+B;AAC3B;AACA;AACA;AACAjC,QAAAA,aAAa,GAAGF,GAAG,CAACG,UAAJ,CAAeC,WAAf,CAA2BL,IAA3B,EAAiCgC,OAAjC,CAAhB;AACH,OALD,MAMK;AACD7B,QAAAA,aAAa,GAAGF,GAAG,CAACG,UAAJ,CAAeC,WAAf,CAA2BL,IAA3B,CAAhB;AACH;;AACDM,MAAAA,oBAAoB,CAAC,MAAD,EAASH,aAAT;AACpB;AAAoB,OAAC,EAAEiC,UAAU,IAAIF,WAAhB,CADD,EAC+B,KAAKxC,eADpC,CAApB;AAEA,WAAKa,kBAAL;AACA,UAAI+B,YAAJ;;AACA,UAAIF,UAAJ,EAAgB;AACZE,QAAAA,YAAY,GAAGjE,UAAU,CAACkE,YAAX,CAAwBC,aAAxB,CAAsCR,OAAO,CAACK,WAA9C,CAAf;AACAlC,QAAAA,aAAa,GAAGmC,YAAY,CAACG,OAAb,CAAqBtC,aAArB,CAAhB;AACH;;AACD,UAAMK,SAAS,GAAGnC,UAAU,CAACoC,iBAAX,CAA6BC,UAA7B,CAAwCX,WAAxC,EAAqDI,aAArD,CAAlB;AACAK,MAAAA,SAAS,CAACG,QAAV;;AACA,UAAMI,EAAE,GAAG,SAALA,EAAK,GAAM;AACb,YAAMC,QAAQ,GAAG3C,UAAU,CAAC4C,gBAAX,CAA4BP,UAA5B,CAAuCX,WAAvC,EAAoDI,aAApD,CAAjB;;AACA,YAAIiC,UAAJ,EAAgB;AACZE,UAAAA,YAAY,CAACI,YAAb,CAA0BlC,SAAS,CAACmC,MAApC;AACH,SAFD,MAGK,IAAIT,WAAJ,EAAiB;AAClBI,UAAAA,YAAY,GAAGjE,UAAU,CAACkE,YAAX,CAAwB7B,UAAxB,CAAmCP,aAAnC,CAAf;AACH;;AACD,YAAMe,KAAK,GAAGF,QAAQ,CAACG,YAAT,EAAd;;AACA,YAAI,CAACX,SAAS,CAACY,OAAf,EAAwB;AACpBF,UAAAA,KAAK,CAACG,gBAAN,GAAyBb,SAAS,CAACc,OAAV,CAAkB,MAAI,CAAC9B,WAAvB,CAAzB;AACH;;AACD,YAAI4C,UAAU,IAAIF,WAAlB,EAA+B;AAC3BhB,UAAAA,KAAK,CAAC0B,UAAN,GAAmBN,YAAY,CAAChB,OAAb,EAAnB;AACH;;AACD,eAAOJ,KAAP;AACH,OAhBD;;AAiBA,WAAK7B,IAAL,CAAUmC,IAAV,CAAe;AAAEC,QAAAA,OAAO,EAAE1B,WAAW,CAAC2B,IAAvB;AAA6BX,QAAAA,EAAE,EAAFA;AAA7B,OAAf;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,gBAAOhB,WAAP,EAAoB8C,WAApB,EAA0D;AAAA;;AAAA,wCAAtBC,oBAAsB;AAAtBA,QAAAA,oBAAsB;AAAA;;AACtD;AACAjE,MAAAA,UAAU,CAACkE,4BAAX,CAAwC,mBAAxC,EAA6DC,SAA7D,EAAwE,CAAxE;AACAvE,MAAAA,WAAW,CAACyB,yBAAZ,CAAsC,aAAtC,EAAqDH,WAArD;AACA,WAAKQ,kBAAL;AACA,UAAM0C,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,UAAItC,YAAY,GAAG,IAAIvC,UAAU,CAACwC,YAAf,CAA4B;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAA5B,CAAnB;AACA,UAAMqC,aAAa,GAAG,kDAClB,iEADkB,GAElB,uCAFJ;AAGA,UAAMC,WAAW,GAAG,OAAOP,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,YAAYrE,MAAM,CAAC6E,SAArF;;AACA,UAAID,WAAJ,EAAiB;AACb,YAAME,cAAc,GAAG,CAAvB,CADa,CACa;;AAC1B,YAAMC,aAAa,IAAIV,WAAJ,SAAoBC,oBAApB,CAAnB;;AACA,YAAI;AACA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAAC1D,MAAlC,EAA0C2D,CAAC,IAAI,CAA/C,EAAkD;AAC9C,gBAAIA,CAAC,KAAKD,aAAa,CAAC1D,MAAd,GAAuB,CAAjC,EAAoC;AAChC,kBAAM4D,iBAAiB,GAAGF,aAAa,CAACC,CAAD,CAAvC;AACAE,cAAAA,0BAA0B,CAACF,CAAC,GAAGF,cAAL,EAAqBG,iBAArB,CAA1B;AACA7C,cAAAA,YAAY,GAAG,IAAIvC,UAAU,CAACwC,YAAf,CAA4B4C,iBAA5B,CAAf;AACH,aAJD,MAKK;AACD,kBAAME,cAAc,GAAGJ,aAAa,CAACC,CAAD,CAApC;AACAhF,cAAAA,MAAM,CAACoF,iBAAP,CAAyBJ,CAAC,GAAGF,cAA7B,EAA6CK,cAA7C,EAFC,CAGD;AACA;AACA;AACA;;AACA9E,cAAAA,UAAU,CAACkE,4BAAX,CAAwC,QAAxC,EAAkDQ,aAAlD,EAAiEC,CAAC,GAAG,CAArE;AACA,kBAAMK,SAAS,GAAGrF,MAAM,CAAC6E,SAAP,CAAiBS,YAAjB,CAA8BH,cAA9B,CAAlB;AACAI,cAAAA,kBAAkB,CAACP,CAAC,GAAGF,cAAL,EAAqBC,aAAa,CAACC,CAAC,GAAG,CAAL,CAAlC,EAA2C,KAAK9D,eAAhD,EAAiEmE,SAAjE,CAAlB;AACAZ,cAAAA,SAAS,CAACe,GAAV,CAAcH,SAAd,EAAyBN,aAAa,CAACC,CAAC,GAAG,CAAL,CAAtC;AACH;AACJ;AACJ,SApBD,CAqBA,OAAOS,GAAP,EAAY;AACR1F,UAAAA,QAAQ,CAAC2F,MAAT,CAAgB,mBAAhB,EAAqC,IAArC,EAA2C,4BAA3C,EAAyED,GAAzE,EADQ,CAER;AACA;;AACA,gBAAM,IAAInE,KAAJ,WAAaqD,aAAb,cAA8Bc,GAAG,CAACE,OAAlC,EAAN;AACH;AACJ,OA9BD,MA+BK;AACD,YAAI;AACAC,UAAAA,iBAAiB,CAAC,aAAD,EAAgBvB,WAAhB,EAA6B,KAAKnD,eAAlC,CAAjB,CADA,CAEA;;AACAb,UAAAA,UAAU,CAACwF,4BAAX,CAAwC,QAAxC,EAAkDrB,SAAlD,EAA6D,CAA7D;AACA,cAAMhD,IAAI,GAAG6C,WAAb;AACA5E,UAAAA,MAAM,CAACqG,OAAP,CAAetE,IAAf,EAAqBuE,OAArB,CAA6B,gBAAkB;AAAA;AAAA,gBAAhBC,GAAgB;AAAA,gBAAXpG,KAAW;;AAC3C;AACA;AACA,gBAAIA,KAAK,KAAKqG,SAAd,EAAyB;AACrBjG,cAAAA,MAAM,CAACoF,iBAAP,CAAyBY,GAAzB,EAA8BA,GAA9B;AACAvB,cAAAA,SAAS,CAACe,GAAV,CAAcxF,MAAM,CAAC6E,SAAP,CAAiBS,YAAjB,CAA8BU,GAA9B,CAAd,EAAkDpG,KAAlD;AACH;AACJ,WAPD;;AAQA,cAAI0E,oBAAoB,CAACjD,MAArB,GAA8B,CAAlC,EAAqC;AACjC6D,YAAAA,0BAA0B,CAAC,sBAAD,EAAyBZ,oBAAoB,CAAC,CAAD,CAA7C,CAA1B;AACAlC,YAAAA,YAAY,GAAG,IAAIvC,UAAU,CAACwC,YAAf,CAA4BiC,oBAAoB,CAAC,CAAD,CAAhD,CAAf;AACH;AACJ,SAjBD,CAkBA,OAAOmB,GAAP,EAAY;AACR1F,UAAAA,QAAQ,CAAC2F,MAAT,CAAgB,mBAAhB,EAAqC,IAArC,EAA2C,gCAA3C,EAA6ED,GAA7E,EADQ,CAER;AACA;;AACA,gBAAM,IAAInE,KAAJ,WAAaqD,aAAb,cAA8Bc,GAAG,CAACE,OAAlC,EAAN;AACH;AACJ;;AACDO,MAAAA,2BAA2B,CAAC,aAAD,EAAgBzB,SAAhB,CAA3B;AACA,UAAMzC,SAAS,GAAGnC,UAAU,CAACoC,iBAAX,CAA6BkE,aAA7B,CAA2C5E,WAA3C,EAAwDkD,SAAxD,CAAlB;AACAzC,MAAAA,SAAS,CAACG,QAAV;AACA,UAAM2B,YAAY,GAAGjE,UAAU,CAACkE,YAAX,CAAwBoC,aAAxB,CAAsC1B,SAAtC,CAArB;;AACA,UAAMlC,EAAE,GAAG,SAALA,EAAK,GAAM;AACb,YAAMC,QAAQ,GAAG3C,UAAU,CAAC4C,gBAAX,CAA4B0D,aAA5B,CAA0C5E,WAA1C,EAAuDkD,SAAvD,CAAjB;AACA,YAAM/B,KAAK,GAAGF,QAAQ,CAACG,YAAT,EAAd;AACAD,QAAAA,KAAK,CAAC0B,UAAN,GAAmBN,YAAY,CAAChB,OAAb,EAAnB;;AACA,YAAI,CAACd,SAAS,CAACY,OAAf,EAAwB;AACpBF,UAAAA,KAAK,CAACG,gBAAN,GAAyBb,SAAS,CAACc,OAAV,CAAkB,MAAI,CAAC9B,WAAvB,CAAzB;AACH;;AACD0B,QAAAA,KAAK,CAACK,eAAN,GAAwBX,YAAY,CAACU,OAAb,EAAxB;AACA,eAAOJ,KAAP;AACH,OATD;;AAUA,WAAK7B,IAAL,CAAUmC,IAAV,CAAe;AAAEC,QAAAA,OAAO,EAAE1B,WAAW,CAAC2B,IAAvB;AAA6BX,QAAAA,EAAE,EAAFA;AAA7B,OAAf;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAAS;AACL;AACA,UAAM6D,KAAK,GAAG9E,KAAK,GAAG8E,KAAtB,CAFK,CAGL;;AACA,UAAMC,UAAU,IAAI/F,YAAY,CAACgG,MAAb,CAAoBC,OAAxB,4BAAoCnG,MAAM,CAACoG,aAAP,CAAqB,QAArB,CAApC,EAAhB;AACA,aAAO,KAAKC,OAAL,CAAa;AAAEJ,QAAAA,UAAU,EAAVA;AAAF,OAAb,EACFK,IADE,CACG,UAAAC,QAAQ,EAAI;AAClB,eAAO,CAACA,QAAQ,CAACC,YAAT,IAAyB,EAA1B,EAA8BC,GAA9B,CAAkC,UAAAC,WAAW;AAAA,iBAAI,IAAIvG,WAAJ,CAAgBJ,WAAW,CAAC4G,SAAZ,CAAsBC,SAAtB,CAAgCF,WAAW,CAACG,UAAZ,IAA0BN,QAAQ,CAACO,UAAnE,CAAhB,CAAJ;AAAA,SAA7C,CAAP;AACH,OAHM,EAIFC,KAJE,CAII,UAAA1B,GAAG,EAAI;AACd,cAAMrF,MAAM,CAACgH,SAAP,CAAiB3B,GAAjB,EAAsBW,KAAtB,CAAN;AACH,OANM,CAAP;AAOH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;8EACI,iBAAciB,aAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEI;AACA,qBAAKvG,UAAL,GAAkB,IAAlB;AACMwG,gBAAAA,GAJV,GAIgB,CAACC,EAAE,GAAGF,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACG,UAAlF,MAAkG,IAAlG,IAA0GD,EAAE,KAAK,KAAK,CAAtH,GAA0HA,EAA1H,GAA+HnH,MAAM,CAACoH,UAAP,EAJ/I;AAAA;AAAA,uBAKU,KAAKzG,UAAL,CAAgB0G,kBAAhB,CAAmCH,GAAnC,CALV;;AAAA;AAMI;AACA;AACMI,gBAAAA,OARV,GAQoB;AACZC,kBAAAA,QAAQ,EAAE,KAAK5G,UAAL,CAAgBwC,aADd;AAEZqE,kBAAAA,MAAM,EAAE,KAAK/G,IAAL,CAAUgG,GAAV,CAAc,UAAAtE,EAAE;AAAA,2BAAIA,EAAE,CAACA,EAAH,EAAJ;AAAA,mBAAhB;AAFI,iBARpB;;AAYI,oBAAI8E,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACQ,aAAhF,EAA+F;AAC3FH,kBAAAA,OAAO,CAACI,WAAR,GAAsBT,aAAa,CAACQ,aAApC;AACH;;AACD9H,gBAAAA,QAAQ,CAAC2F,MAAT,CAAgB,mBAAhB,EAAqC4B,GAArC,EAA0C,mBAA1C,EAA+DI,OAAO,CAACE,MAAR,CAAevG,MAA9E;AAfJ,iDAgBW,KAAKN,UAAL,CAAgB2G,OAAhB,CAAwB,CAACL,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACU,UAA7E,KAA4F,QAApH,EAA8HL,OAA9H,EAAuIJ,GAAvI,EAA4ID,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAAChB,UAAxN,CAhBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAkBA;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,WAAKxF,IAAL,CAAUmH,MAAV,CAAiB,CAAjB;;AACA,WAAKlH,UAAL,GAAkB,KAAlB;AACH;;;;;;AAELnB,OAAO,CAACgB,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASsH,oBAAT,CAA8BC,GAA9B,EAAmCtI,KAAnC,EAA0CuI,WAA1C,EAAuD;AACnD,MAAI,OAAOvI,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC7C,UAAM,IAAI0B,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,MAAMc,YAAY,GAAGxC,KAArB;AACA,MAAIyD,UAAU,GAAG,CAAjB;;AACA,MAAIjB,YAAY,CAACE,MAAb,KAAwB2D,SAA5B,EAAuC;AACnC,MAAE5C,UAAF;;AACA,QAAI,CAAC8E,WAAL,EAAkB;AACd,YAAM,IAAI7G,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,cAAvC,CAAb,iDAAN;AACH;;AACD,QAAI,OAAO9F,YAAY,CAACE,MAApB,KAA+B,SAAnC,EAA8C;AAC1C,YAAM,IAAIhB,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,cAAvC,CAAb,oCAAN;AACH;AACJ;;AACD,MAAI9F,YAAY,CAACiG,cAAb,KAAgCpC,SAApC,EAA+C;AAC3C,MAAE5C,UAAF;;AACA,QAAI,EAAEjB,YAAY,CAACiG,cAAb,YAAuClI,WAAW,CAAC4G,SAArD,CAAJ,EAAqE;AACjE,YAAM,IAAIzF,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,cAAvC,CAAb,uDAAN;AACH;AACJ;;AACD,MAAI7E,UAAU,GAAG,CAAjB,EAAoB;AAChB,UAAM,IAAI/B,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,cAAvC,CAAb,kDAAN;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShD,0BAAT,CAAoCgD,GAApC,EAAyCtI,KAAzC,EAAgD4D,OAAhD,EAAyD;AACrD,MAAI,CAACnD,UAAU,CAACiI,gBAAX,CAA4B1I,KAA5B,EAAmC4D,OAAnC,CAAL,EAAkD;AAC9CyE,IAAAA,oBAAoB,CAACC,GAAD,EAAMtI,KAAN;AAAa;AAAmB,SAAhC,CAApB;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuD,0BAAT,CAAoC+E,GAApC,EAAyCtI,KAAzC,EAAgD4D,OAAhD,EAAyD;AACrD,MAAI,CAACnD,UAAU,CAACiI,gBAAX,CAA4B1I,KAA5B,EAAmC4D,OAAnC,CAAL,EAAkD;AAC9CyE,IAAAA,oBAAoB,CAACC,GAAD,EAAMtI,KAAN;AAAa;AAAmB,QAAhC,CAApB;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6D,kBAAT,CAA4ByE,GAA5B,EAAiCtI,KAAjC,EAAwC4D,OAAxC,EAAiD;AAC7C,MAAI,CAACnD,UAAU,CAACiI,gBAAX,CAA4B1I,KAA5B,EAAmC4D,OAAnC,CAAL,EAAkD;AAC9C,QAAI,CAACpD,MAAM,CAACmI,QAAP,CAAgB3I,KAAhB,CAAL,EAA6B;AACzB,YAAM,IAAI0B,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,wBAAvC,CAAb,8BAAN;AACH;;AACD,QAAMM,UAAU,GAAG5I,KAAnB;;AACA,QAAI,WAAW4I,UAAX,IAAyB,OAAOA,UAAU,CAAC7E,KAAlB,KAA4B,SAAzD,EAAoE;AAChE,YAAM,IAAIrC,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,wBAAvC,CAAb,kCAAN;AACH;;AACD,QAAI,iBAAiBM,UAArB,EAAiC;AAC7B,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAU,CAAC3E,WAAzB,CAAL,EAA4C;AACxC,cAAM,IAAIvC,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,wBAAvC,CAAb,uCAAN;AACH;;AACD,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwD,UAAU,CAAC3E,WAAX,CAAuBxC,MAA3C,EAAmD,EAAE2D,CAArD,EAAwD;AACpD,YAAI;AACAhF,UAAAA,MAAM,CAACoF,iBAAP,CAAyBJ,CAAzB,EAA4BwD,UAAU,CAAC3E,WAAX,CAAuBmB,CAAvB,CAA5B;AACH,SAFD,CAGA,OAAOS,GAAP,EAAY;AACR,gBAAM,IAAInE,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,wBAAvC,CAAb,4CAA6GzC,GAAG,CAACE,OAAjH,EAAN;AACH;AACJ;AACJ;;AACD,QAAI,WAAW6C,UAAX,IAAyB,iBAAiBA,UAA9C,EAA0D;AACtD,YAAM,IAAIlH,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,wBAAvC,CAAb,6DAAN;AACH;AACJ;AACJ;;AACDvI,OAAO,CAAC8D,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS3B,oBAAT,CAA8BoG,GAA9B,EAAmCS,GAAnC,EAAwCC,YAAxC,EAAsDC,cAAtD,EAAsE;AAClE,MAAI,CAACzI,MAAM,CAAC0I,aAAP,CAAqBH,GAArB,CAAL,EAAgC;AAC5B,UAAM,IAAIrH,KAAJ,CAAUjB,UAAU,CAAC0I,mBAAX,CAA+Bb,GAA/B,EAAoCS,GAApC,CAAV,CAAN;AACH;;AACDzI,EAAAA,YAAY,CAAC8I,iBAAb,CAA+Bd,GAA/B,EAAoCS,GAApC,EAAyC,oBAAzC,EAA+D;AAC3DC,IAAAA,YAAY,EAAEA,YAAY,GAAG,KAAH,GAAW,MADsB;AAE3DK,IAAAA,eAAe,EAAE,IAF0C;AAG3DJ,IAAAA,cAAc,EAAdA;AAH2D,GAA/D;AAKH;;AACDlJ,OAAO,CAACmC,oBAAR,GAA+BA,oBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASyD,kBAAT,CAA4B2C,GAA5B,EAAiCgB,GAAjC,EAAsCL,cAAtC,EAAsD3F,IAAtD,EAA4D;AACxDhD,EAAAA,YAAY,CAAC8I,iBAAb,CAA+Bd,GAA/B,EAAoCgB,GAApC,EAAyC,iBAAzC,EAA4D;AAAEN,IAAAA,YAAY,EAAE,MAAhB;AAAwBK,IAAAA,eAAe,EAAE,IAAzC;AAA+CJ,IAAAA,cAAc,EAAdA;AAA/C,GAA5D,EAA6H3F,IAA7H;AACH;;AACDvD,OAAO,CAAC4F,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASW,2BAAT,CAAqCgC,GAArC,EAA0C1G,IAA1C,EAAgD;AAC5C,MAAM2C,MAAM,GAAG,EAAf;AACA3C,EAAAA,IAAI,CAACuE,OAAL,CAAa,UAACnG,KAAD,EAAQoG,GAAR,EAAgB;AACzB7B,IAAAA,MAAM,CAACnB,IAAP,CAAYgD,GAAZ;AACH,GAFD;AAGA7B,EAAAA,MAAM,CAACgF,IAAP,CAAY,UAACC,IAAD,EAAOC,KAAP;AAAA,WAAiBD,IAAI,CAACE,SAAL,CAAeD,KAAf,CAAjB;AAAA,GAAZ;;AACA,OAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAAC9C,MAA3B,EAAmC,EAAE2D,CAArC,EAAwC;AACpC,QAAIb,MAAM,CAACa,CAAC,GAAG,CAAL,CAAN,CAAcuE,UAAd,CAAyBpF,MAAM,CAACa,CAAD,CAA/B,CAAJ,EAAyC;AACrC,YAAM,IAAI1D,KAAJ,WAAajB,UAAU,CAAC+H,sBAAX,CAAkCF,GAAlC,EAAuC,YAAvC,CAAb,sBAA4E/D,MAAM,CAACa,CAAC,GAAG,CAAL,CAAlF,sCAAN;AACH;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,iBAAT,CAA2BsC,GAA3B,EAAgCS,GAAhC,EAAqCE,cAArC,EAAqD;AACjD,MAAI,CAACzI,MAAM,CAAC0I,aAAP,CAAqBH,GAArB,CAAL,EAAgC;AAC5B,UAAM,IAAIrH,KAAJ,CAAUjB,UAAU,CAAC0I,mBAAX,CAA+Bb,GAA/B,EAAoCS,GAApC,CAAV,CAAN;AACH;;AACD,MAAIlJ,MAAM,CAAC+J,IAAP,CAAYb,GAAZ,EAAiBtH,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH;;AACDiE,EAAAA,kBAAkB,CAAC2C,GAAD,EAAMS,GAAN,EAAWE,cAAX,CAAlB;AACH","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst reference_1 = require(\"./reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst google_gax_1 = require(\"google-gax\");\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class WriteResult\n */\nclass WriteResult {\n    /**\n     * @hideconstructor\n     *\n     * @param _writeTime The time of the corresponding document write.\n     */\n    constructor(_writeTime) {\n        this._writeTime = _writeTime;\n    }\n    /**\n     * The write time as set by the Firestore servers.\n     *\n     * @type {Timestamp}\n     * @name WriteResult#writeTime\n     * @readonly\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(writeResult => {\n     *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n     * });\n     */\n    get writeTime() {\n        return this._writeTime;\n    }\n    /**\n     * Returns true if this `WriteResult` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `WriteResult` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof WriteResult &&\n                this._writeTime.isEqual(other._writeTime)));\n    }\n}\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class WriteBatch\n */\nclass WriteBatch {\n    /**\n     * @hideconstructor\n     */\n    constructor(firestore) {\n        /**\n         * An array of document paths and the corresponding write operations that are\n         * executed as part of the commit. The resulting `api.IWrite` will be sent to\n         * the backend.\n         *\n         * @private\n         */\n        this._ops = [];\n        this._committed = false;\n        this._firestore = firestore;\n        this._serializer = new serializer_1.Serializer(firestore);\n        this._allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * The number of writes in this batch.\n     */\n    get _opCount() {\n        return this._ops.length;\n    }\n    /**\n     * Checks if this write batch has any pending operations.\n     *\n     * @private\n     */\n    get isEmpty() {\n        return this._ops.length === 0;\n    }\n    /**\n     * Throws an error if this batch has already been committed.\n     *\n     * @private\n     */\n    verifyNotCommitted() {\n        if (this._committed) {\n            throw new Error('Cannot modify a WriteBatch that has been committed.');\n        }\n    }\n    /**\n     * Create a document with the provided object values. This will fail the batch\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * writeBatch.create(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    create(documentRef, data) {\n        const ref = reference_1.validateDocumentReference('documentRef', documentRef);\n        const firestoreData = ref._converter.toFirestore(data);\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ false, this._allowUndefined);\n        this.verifyNotCommitted();\n        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n        transform.validate();\n        const precondition = new document_1.Precondition({ exists: false });\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Deletes a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.delete(documentRef);\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    delete(documentRef, precondition) {\n        const ref = reference_1.validateDocumentReference('documentRef', documentRef);\n        validateDeletePrecondition('precondition', precondition, { optional: true });\n        this.verifyNotCommitted();\n        const conditions = new document_1.Precondition(precondition);\n        const op = () => {\n            const write = { delete: ref.formattedName };\n            if (!conditions.isEmpty) {\n                write.currentDocument = conditions.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions},\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    set(documentRef, data, options) {\n        validateSetOptions('options', options, { optional: true });\n        const mergeLeaves = options && options.merge === true;\n        const mergePaths = options && options.mergeFields;\n        const ref = reference_1.validateDocumentReference('documentRef', documentRef);\n        let firestoreData;\n        if (mergeLeaves || mergePaths) {\n            // Cast to any in order to satisfy the union type constraint on\n            // toFirestore().\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            firestoreData = ref._converter.toFirestore(data, options);\n        }\n        else {\n            firestoreData = ref._converter.toFirestore(data);\n        }\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ !!(mergePaths || mergeLeaves), this._allowUndefined);\n        this.verifyNotCommitted();\n        let documentMask;\n        if (mergePaths) {\n            documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n            firestoreData = documentMask.applyTo(firestoreData);\n        }\n        const transform = document_1.DocumentTransform.fromObject(documentRef, firestoreData);\n        transform.validate();\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(documentRef, firestoreData);\n            if (mergePaths) {\n                documentMask.removeFields(transform.fields);\n            }\n            else if (mergeLeaves) {\n                documentMask = document_1.DocumentMask.fromObject(firestoreData);\n            }\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            if (mergePaths || mergeLeaves) {\n                write.updateMask = documentMask.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * doesn't yet exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to restrict this update.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.update(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        // eslint-disable-next-line prefer-rest-params\n        validate_1.validateMinNumberOfArguments('WriteBatch.update', arguments, 2);\n        reference_1.validateDocumentReference('documentRef', documentRef);\n        this.verifyNotCommitted();\n        const updateMap = new Map();\n        let precondition = new document_1.Precondition({ exists: true });\n        const argumentError = 'Update() requires either a single JavaScript ' +\n            'object or an alternating list of field/value pairs that can be ' +\n            'followed by an optional precondition.';\n        const usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n        if (usesVarargs) {\n            const argumentOffset = 1; // Respect 'documentRef' in the error message\n            const fieldOrValues = [dataOrField, ...preconditionOrValues];\n            try {\n                for (let i = 0; i < fieldOrValues.length; i += 2) {\n                    if (i === fieldOrValues.length - 1) {\n                        const maybePrecondition = fieldOrValues[i];\n                        validateUpdatePrecondition(i + argumentOffset, maybePrecondition);\n                        precondition = new document_1.Precondition(maybePrecondition);\n                    }\n                    else {\n                        const maybeFieldPath = fieldOrValues[i];\n                        path_1.validateFieldPath(i + argumentOffset, maybeFieldPath);\n                        // Unlike the `validateMinNumberOfArguments` invocation above, this\n                        // validation can be triggered both from `WriteBatch.update()` and\n                        // `DocumentReference.update()`. Hence, we don't use the fully\n                        // qualified API name in the error message.\n                        validate_1.validateMinNumberOfArguments('update', fieldOrValues, i + 1);\n                        const fieldPath = path_1.FieldPath.fromArgument(maybeFieldPath);\n                        validateFieldValue(i + argumentOffset, fieldOrValues[i + 1], this._allowUndefined, fieldPath);\n                        updateMap.set(fieldPath, fieldOrValues[i + 1]);\n                    }\n                }\n            }\n            catch (err) {\n                logger_1.logger('WriteBatch.update', null, 'Varargs validation failed:', err);\n                // We catch the validation error here and re-throw to provide a better\n                // error message.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        else {\n            try {\n                validateUpdateMap('dataOrField', dataOrField, this._allowUndefined);\n                // eslint-disable-next-line prefer-rest-params\n                validate_1.validateMaxNumberOfArguments('update', arguments, 3);\n                const data = dataOrField;\n                Object.entries(data).forEach(([key, value]) => {\n                    // Skip `undefined` values (can be hit if `ignoreUndefinedProperties`\n                    // is set)\n                    if (value !== undefined) {\n                        path_1.validateFieldPath(key, key);\n                        updateMap.set(path_1.FieldPath.fromArgument(key), value);\n                    }\n                });\n                if (preconditionOrValues.length > 0) {\n                    validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n                    precondition = new document_1.Precondition(preconditionOrValues[0]);\n                }\n            }\n            catch (err) {\n                logger_1.logger('WriteBatch.update', null, 'Non-varargs validation failed:', err);\n                // We catch the validation error here and prefix the error with a custom\n                // message to describe the usage of update() better.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        validateNoConflictingFields('dataOrField', updateMap);\n        const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n        transform.validate();\n        const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n            const write = document.toWriteProto();\n            write.updateMask = documentMask.toProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Atomically commits all pending operations to the database and verifies all\n     * preconditions. Fails the entire write if any precondition is not met.\n     *\n     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n     * when this batch completes.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     */\n    commit() {\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        // Commits should also be retried when they fail with status code ABORTED.\n        const retryCodes = [google_gax_1.Status.ABORTED, ...util_1.getRetryCodes('commit')];\n        return this._commit({ retryCodes })\n            .then(response => {\n            return (response.writeResults || []).map(writeResult => new WriteResult(timestamp_1.Timestamp.fromProto(writeResult.updateTime || response.commitTime)));\n        })\n            .catch(err => {\n            throw util_1.wrapError(err, stack);\n        });\n    }\n    /**\n     * Commit method that takes an optional transaction ID.\n     *\n     * @private\n     * @param commitOptions Options to use for this commit.\n     * @param commitOptions.transactionId The transaction ID of this commit.\n     * @param commitOptions.requestTag A unique client-assigned identifier for\n     * this request.\n     * @returns  A Promise that resolves when this batch completes.\n     */\n    async _commit(commitOptions) {\n        var _a;\n        // Note: We don't call `verifyNotCommitted()` to allow for retries.\n        this._committed = true;\n        const tag = (_a = commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.requestTag) !== null && _a !== void 0 ? _a : util_1.requestTag();\n        await this._firestore.initializeIfNeeded(tag);\n        // Note that the request may not always be of type ICommitRequest. This is\n        // just here to ensure type safety.\n        const request = {\n            database: this._firestore.formattedName,\n            writes: this._ops.map(op => op.op()),\n        };\n        if (commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.transactionId) {\n            request.transaction = commitOptions.transactionId;\n        }\n        logger_1.logger('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n        return this._firestore.request((commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.methodName) || 'commit', request, tag, commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.retryCodes);\n    }\n    /**\n     * Resets the WriteBatch and dequeues all pending operations.\n     * @private\n     */\n    _reset() {\n        this._ops.splice(0);\n        this._committed = false;\n    }\n}\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param allowExists Whether to allow the 'exists' preconditions.\n */\nfunction validatePrecondition(arg, value, allowExists) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Input is not an object.');\n    }\n    const precondition = value;\n    let conditions = 0;\n    if (precondition.exists !== undefined) {\n        ++conditions;\n        if (!allowExists) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not an allowed precondition.`);\n        }\n        if (typeof precondition.exists !== 'boolean') {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"exists\" is not a boolean.'`);\n        }\n    }\n    if (precondition.lastUpdateTime !== undefined) {\n        ++conditions;\n        if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} \"lastUpdateTime\" is not a Firestore Timestamp.`);\n        }\n    }\n    if (conditions > 1) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'precondition')} Input specifies more than one precondition.`);\n    }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateUpdatePrecondition(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        validatePrecondition(arg, value, /* allowExists= */ false);\n    }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateDeletePrecondition(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        validatePrecondition(arg, value, /* allowExists= */ true);\n    }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\nfunction validateSetOptions(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        if (!util_1.isObject(value)) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} Input is not an object.`);\n        }\n        const setOptions = value;\n        if ('merge' in setOptions && typeof setOptions.merge !== 'boolean') {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"merge\" is not a boolean.`);\n        }\n        if ('mergeFields' in setOptions) {\n            if (!Array.isArray(setOptions.mergeFields)) {\n                throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not an array.`);\n            }\n            for (let i = 0; i < setOptions.mergeFields.length; ++i) {\n                try {\n                    path_1.validateFieldPath(i, setOptions.mergeFields[i]);\n                }\n                catch (err) {\n                    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} \"mergeFields\" is not valid: ${err.message}`);\n                }\n            }\n        }\n        if ('merge' in setOptions && 'mergeFields' in setOptions) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'set() options argument')} You cannot specify both \"merge\" and \"mergeFields\".`);\n        }\n    }\n}\nexports.validateSetOptions = validateSetOptions;\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateDocumentData(arg, obj, allowDeletes, allowUndefined) {\n    if (!util_1.isPlainObject(obj)) {\n        throw new Error(validate_1.customObjectMessage(arg, obj));\n    }\n    serializer_1.validateUserInput(arg, obj, 'Firestore document', {\n        allowDeletes: allowDeletes ? 'all' : 'none',\n        allowTransforms: true,\n        allowUndefined,\n    });\n}\nexports.validateDocumentData = validateDocumentData;\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @param path The path to show in the error message.\n */\nfunction validateFieldValue(arg, val, allowUndefined, path) {\n    serializer_1.validateUserInput(arg, val, 'Firestore value', { allowDeletes: 'root', allowTransforms: true, allowUndefined }, path);\n}\nexports.validateFieldValue = validateFieldValue;\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\nfunction validateNoConflictingFields(arg, data) {\n    const fields = [];\n    data.forEach((value, key) => {\n        fields.push(key);\n    });\n    fields.sort((left, right) => left.compareTo(right));\n    for (let i = 1; i < fields.length; ++i) {\n        if (fields[i - 1].isPrefixOf(fields[i])) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'update map')} Field \"${fields[i - 1]}\" was specified multiple times.`);\n        }\n    }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateUpdateMap(arg, obj, allowUndefined) {\n    if (!util_1.isPlainObject(obj)) {\n        throw new Error(validate_1.customObjectMessage(arg, obj));\n    }\n    if (Object.keys(obj).length === 0) {\n        throw new Error('At least one field must be updated.');\n    }\n    validateFieldValue(arg, obj, allowUndefined);\n}\n//# sourceMappingURL=write-batch.js.map"]},"metadata":{},"sourceType":"script"}