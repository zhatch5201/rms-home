{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Queue = require('yocto-queue');\n\nvar pLimit = function pLimit(concurrency) {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  var queue = new Queue();\n  var activeCount = 0;\n\n  var next = function next() {\n    activeCount--;\n\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n\n  var run = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fn, resolve) {\n      var _len,\n          args,\n          _key,\n          result,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              for (_len = _args2.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                args[_key - 2] = _args2[_key];\n              }\n\n              activeCount++;\n              result = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", fn.apply(void 0, args));\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }))();\n              resolve(result);\n              _context2.prev = 4;\n              _context2.next = 7;\n              return result;\n\n            case 7:\n              _context2.next = 11;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](4);\n\n            case 11:\n              next();\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 9]]);\n    }));\n\n    return function run(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var enqueue = function enqueue(fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    queue.enqueue(run.bind.apply(run, [null, fn, resolve].concat(args)));\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.resolve();\n\n            case 2:\n              if (activeCount < concurrency && queue.size > 0) {\n                queue.dequeue()();\n              }\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  };\n\n  var generator = function generator(fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise(function (resolve) {\n      enqueue.apply(void 0, [fn, resolve].concat(args));\n    });\n  };\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: function get() {\n        return activeCount;\n      }\n    },\n    pendingCount: {\n      get: function get() {\n        return queue.size;\n      }\n    },\n    clearQueue: {\n      value: function value() {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/node_modules/@google-cloud/storage/node_modules/p-limit/index.js"],"names":["Queue","require","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","args","result","enqueue","bind","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear","module","exports"],"mappings":"AAAA;;;;;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,WAAW,EAAI;AAC7B,MAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;AACtF,UAAM,IAAII,SAAJ,CAAc,qDAAd,CAAN;AACA;;AAED,MAAMC,KAAK,GAAG,IAAIR,KAAJ,EAAd;AACA,MAAIS,WAAW,GAAG,CAAlB;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAClBD,IAAAA,WAAW;;AAEX,QAAID,KAAK,CAACG,IAAN,GAAa,CAAjB,EAAoB;AACnBH,MAAAA,KAAK,CAACI,OAAN;AACA;AACD,GAND;;AAQA,MAAMC,GAAG;AAAA,wEAAG,kBAAOC,EAAP,EAAWC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAuBC,IAAvB;AAAuBA,gBAAAA,IAAvB;AAAA;;AACXP,cAAAA,WAAW;AAELQ,cAAAA,MAHK,GAGI,yDAAC;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAYH,EAAE,MAAF,SAAME,IAAN,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD,IAHJ;AAKXD,cAAAA,OAAO,CAACE,MAAD,CAAP;AALW;AAAA;AAAA,qBAQJA,MARI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAWXP,cAAAA,IAAI;;AAXO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHG,GAAG;AAAA;AAAA;AAAA,KAAT;;AAcA,MAAMK,OAAO,GAAG,SAAVA,OAAU,CAACJ,EAAD,EAAKC,OAAL,EAA0B;AAAA,uCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACzCR,IAAAA,KAAK,CAACU,OAAN,CAAcL,GAAG,CAACM,IAAJ,OAAAN,GAAG,GAAM,IAAN,EAAYC,EAAZ,EAAgBC,OAAhB,SAA4BC,IAA5B,EAAjB;;AAEA,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKMI,OAAO,CAACL,OAAR,EALN;;AAAA;AAOA,kBAAIN,WAAW,GAAGN,WAAd,IAA6BK,KAAK,CAACG,IAAN,GAAa,CAA9C,EAAiD;AAChDH,gBAAAA,KAAK,CAACI,OAAN;AACA;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAWA,GAdD;;AAgBA,MAAMS,SAAS,GAAG,SAAZA,SAAY,CAACP,EAAD;AAAA,uCAAQE,IAAR;AAAQA,MAAAA,IAAR;AAAA;;AAAA,WAAiB,IAAII,OAAJ,CAAY,UAAAL,OAAO,EAAI;AACzDG,MAAAA,OAAO,MAAP,UAAQJ,EAAR,EAAYC,OAAZ,SAAwBC,IAAxB;AACA,KAFkC,CAAjB;AAAA,GAAlB;;AAIAM,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;AAClCZ,IAAAA,WAAW,EAAE;AACZe,MAAAA,GAAG,EAAE;AAAA,eAAMf,WAAN;AAAA;AADO,KADqB;AAIlCgB,IAAAA,YAAY,EAAE;AACbD,MAAAA,GAAG,EAAE;AAAA,eAAMhB,KAAK,CAACG,IAAZ;AAAA;AADQ,KAJoB;AAOlCe,IAAAA,UAAU,EAAE;AACXC,MAAAA,KAAK,EAAE,iBAAM;AACZnB,QAAAA,KAAK,CAACoB,KAAN;AACA;AAHU;AAPsB,GAAnC;AAcA,SAAOP,SAAP;AACA,CAjED;;AAmEAQ,MAAM,CAACC,OAAP,GAAiB5B,MAAjB","sourcesContent":["'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"]},"metadata":{},"sourceType":"script"}