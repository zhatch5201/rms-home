{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zack\\\\Desktop\\\\rms-home\\\\src\\\\firebase\\\\test.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useState, useEffect, Fragment } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport firebase from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PeopleGrid() {\n  _s();\n\n  const [people, setPeople] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const ref = firebase.firestore().collection(\"People\");\n\n  function getPeople() {\n    setLoading(true);\n    ref.onSnapshot(querySnapshot => {\n      const items = [];\n      querySnapshot.forEach(person => {\n        var timer = setTimeout(() => {\n          console.log(`test`);\n        }, 50);\n        items.push(person.data());\n        clearTimeout(timer);\n      });\n      setPeople(items);\n      setLoading(false); // console.log(people);\n    });\n  }\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }, this);\n  }\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 130\n  }, {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 130\n  }, {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 90\n  }, {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: params => `${params.getValue('firstName') || ''} ${params.getValue('lastName') || ''}`\n  }];\n  const rows = people;\n  console.log(people);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        pageSize: 25,\n        checkboxSelection: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PeopleGrid, \"byosEDiHapU6zkfDudOCz8R7YLg=\");\n\n_c = PeopleGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"PeopleGrid\");","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/src/firebase/test.js"],"names":["React","useState","useEffect","Fragment","DataGrid","firebase","PeopleGrid","people","setPeople","loading","setLoading","ref","firestore","collection","getPeople","onSnapshot","querySnapshot","items","forEach","person","timer","setTimeout","console","log","push","data","clearTimeout","columns","field","headerName","width","type","description","sortable","valueGetter","params","getValue","rows","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { useState, useEffect, Fragment } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport firebase from \"./firebase\";\r\n\r\n\r\nexport default function PeopleGrid() {\r\n   const [people, setPeople] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const ref = firebase.firestore().collection(\"People\");\r\n\r\n   function getPeople() {\r\n      setLoading(true);\r\n      ref.onSnapshot((querySnapshot) => {\r\n         const items = [];\r\n         querySnapshot.forEach((person) => {\r\n            var timer = setTimeout(() => { console.log(`test`); }, 50);\r\n            items.push(person.data());\r\n            clearTimeout(timer);\r\n         });\r\n         setPeople(items);\r\n         setLoading(false);\r\n         // console.log(people);\r\n      });\r\n   }\r\n   useEffect(() => {\r\n      getPeople();\r\n   }, []);\r\n   if (loading) {\r\n      return (<h1>Loading...</h1>);\r\n   }\r\n\r\n\r\n   const columns = [\r\n      { field: 'id', headerName: 'ID', width: 70 },\r\n      { field: 'firstName', headerName: 'First name', width: 130 },\r\n      { field: 'lastName', headerName: 'Last name', width: 130 },\r\n      { field: 'age', headerName: 'Age', type: 'number', width: 90, },\r\n      { field: 'fullName', headerName: 'Full name', description: 'This column has a value getter and is not sortable.', sortable: false, width: 160, valueGetter: (params) => `${params.getValue('firstName') || ''} ${params.getValue('lastName') || ''}`, },\r\n   ];\r\n\r\n   const rows = people;\r\n   console.log(people);\r\n   return (\r\n      <Fragment>\r\n         <div style={{ height: '100vh', width: '100%' }}>\r\n            <DataGrid rows={rows} columns={columns} pageSize={25} checkboxSelection />\r\n         </div>\r\n      </Fragment>\r\n   );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}