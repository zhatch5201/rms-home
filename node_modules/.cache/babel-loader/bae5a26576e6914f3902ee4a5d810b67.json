{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Zack/Desktop/rms-home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\n\nvar path = require(\"path\");\n\nvar createApiCall_1 = require(\"./createApiCall\");\n\nvar descriptor_1 = require(\"./descriptor\");\n\nvar gax = require(\"./gax\");\n\nvar configData = require(\"./operations_client_config.json\");\n\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\n\nvar version = require('../../package.json').version;\n\nvar DEFAULT_SERVICE_PORT = 443;\nvar CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\n\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\n\nvar OperationsClient = /*#__PURE__*/function () {\n  function OperationsClient(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  operationsProtos, options) {\n    var _this = this;\n\n    _classCallCheck(this, OperationsClient);\n\n    var opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    var googleApiClient = ['gl-node/' + process.versions.node];\n\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n\n    var defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth; // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n    this.descriptor = {\n      listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n    }; // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n\n    var operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    var operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n\n    var _loop = function _loop() {\n      var methodName = _operationsStubMethod[_i];\n      var innerCallPromise = operationsStub.then(function (stub) {\n        return function () {\n          var func = stub[methodName];\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return func.apply(stub, args);\n        };\n      }, function (err) {\n        return function () {\n          throw err;\n        };\n      });\n      _this.innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, defaults[methodName], _this.descriptor[methodName]);\n    };\n\n    for (var _i = 0, _operationsStubMethod = operationsStubMethods; _i < _operationsStubMethod.length; _i++) {\n      _loop();\n    }\n  }\n\n  _createClass(OperationsClient, [{\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (this.auth && 'getProjectId' in this.auth) {\n        return this.auth.getProjectId(callback);\n      }\n\n      if (callback) {\n        callback(new Error('Cannot determine project ID.'));\n      } else {\n        return Promise.reject('Cannot determine project ID.');\n      }\n    } // Service calls\n\n  }, {\n    key: \"getOperationInternal\",\n    value: function getOperationInternal(request, options, callback) {\n      request = request || {};\n      options = options || {};\n      return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(request, optionsOrCallback, callback) {\n      var options;\n\n      if (optionsOrCallback instanceof Function && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      request = request || {};\n      options = options || {};\n      return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n\n  }, {\n    key: \"listOperations\",\n    value: function listOperations(request, optionsOrCallback, callback) {\n      var options;\n\n      if (optionsOrCallback instanceof Function && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      request = request || {};\n      options = options || {};\n      return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n\n  }, {\n    key: \"listOperationsStream\",\n    value: function listOperationsStream(request, options) {\n      var callSettings = new gax.CallSettings(options);\n      return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n\n  }, {\n    key: \"listOperationsAsync\",\n    value: function listOperationsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n\n  }, {\n    key: \"cancelOperation\",\n    value: function cancelOperation(request, optionsOrCallback, callback) {\n      var options;\n\n      if (optionsOrCallback instanceof Function && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      request = request || {};\n      options = options || {};\n      return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n\n  }, {\n    key: \"deleteOperation\",\n    value: function deleteOperation(request, optionsOrCallback, callback) {\n      var options;\n\n      if (optionsOrCallback instanceof Function && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      request = request || {};\n      options = options || {};\n      return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n  }]);\n\n  return OperationsClient;\n}();\n\nexports.OperationsClient = OperationsClient;\n\nvar OperationsClientBuilder =\n/**\n * Builds a new Operations Client\n * @param gaxGrpc {GrpcClient}\n */\nfunction OperationsClientBuilder(gaxGrpc) {\n  _classCallCheck(this, OperationsClientBuilder);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var operationsProtos; // loaded protos have any type\n\n  if (gaxGrpc.fallback) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    var protoJson = require('../../protos/operations.json');\n\n    operationsProtos = gaxGrpc.loadProto(protoJson);\n  } else {\n    operationsProtos = gaxGrpc.loadProto(path.join(__dirname, '..', '..', 'protos', 'operations.json'));\n    Object.assign(this, operationsProtos.google.longrunning);\n  }\n  /**\n   * Build a new instance of {@link OperationsClient}.\n   *\n   * @param {Object=} opts - The optional parameters.\n   * @param {String=} opts.servicePath - Domain name of the API remote host.\n   * @param {number=} opts.port - The port on which to connect to the remote host.\n   * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n   * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n   */\n\n\n  this.operationsClient = function (opts) {\n    if (gaxGrpc.fallback) {\n      opts.fallback = true;\n    }\n\n    return new OperationsClient(gaxGrpc, operationsProtos, opts);\n  };\n\n  Object.assign(this.operationsClient, OperationsClient);\n};\n\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"sources":["../../src/operationsClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst path = require(\"path\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = require(\"./gax\");\nconst configData = require(\"./operations_client_config.json\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options) {\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {},\n        }, options);\n        const googleApiClient = ['gl-node/' + process.versions.node];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n        if (opts.fallback) {\n            googleApiClient.push('gl-web/' + version);\n        }\n        else {\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        const operationsStub = gaxGrpc.createStub(opts.fallback\n            ? operationsProtos.lookupService('google.longrunning.Operations')\n            : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            'getOperation',\n            'listOperations',\n            'cancelOperation',\n            'deleteOperation',\n        ];\n        for (const methodName of operationsStubMethods) {\n            const innerCallPromise = operationsStub.then(stub => (...args) => {\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, err => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n    listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n    listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */\n    constructor(gaxGrpc) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let operationsProtos; // loaded protos have any type\n        if (gaxGrpc.fallback) {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const protoJson = require('../../protos/operations.json');\n            operationsProtos = gaxGrpc.loadProto(protoJson);\n        }\n        else {\n            operationsProtos = gaxGrpc.loadProto(path.join(__dirname, '..', '..', 'protos', 'operations.json'));\n            Object.assign(this, operationsProtos.google.longrunning);\n        }\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */\n        this.operationsClient = opts => {\n            if (gaxGrpc.fallback) {\n                opts.fallback = true;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;\n//# sourceMappingURL=operationsClient.js.map"]},"metadata":{},"sourceType":"script"}