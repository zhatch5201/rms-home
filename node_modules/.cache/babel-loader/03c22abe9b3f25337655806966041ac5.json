{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zack\\\\Desktop\\\\rms-home\\\\src\\\\Components\\\\person.js\",\n    _s = $RefreshSig$();\n\n//  ================= Get People ==============\nimport firebase from 'firebase';\nimport { Fragment, useState, useEffect } from 'react'; //  ================= Get People ==============\n// ================== Card Imports ============\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography'; // ================== Card Imports ============\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  // Has to load whole People collection to get random person... for now...\n  const [people, setPeople] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const ref = firebase.firestore().collection(\"People\");\n  var person;\n\n  async function getPeople() {\n    setLoading(true);\n    ref.onSnapshot(querySnapshot => {\n      const items = [];\n      querySnapshot.forEach(person => {\n        items.push(person.data());\n      });\n      setPeople(items);\n      setLoading(false); // console.log(people);\n    });\n  }\n\n  useEffect(() => {\n    getPeople();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }, this);\n  } else {\n    person = people[Math.floor(Math.random() * people.length)];\n  }\n\n  console.log(person); // Has to load whole People collection to get random person... for now...\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: JSON.stringify(person, null, 4)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Test, \"b3BFqtNlv/+8lPVmieNQw64yYCM=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/Zack/Desktop/rms-home/src/Components/person.js"],"names":["firebase","Fragment","useState","useEffect","React","makeStyles","Card","CardActions","CardContent","Button","Typography","Test","people","setPeople","loading","setLoading","ref","firestore","collection","person","getPeople","onSnapshot","querySnapshot","items","forEach","push","data","Math","floor","random","length","console","log","JSON","stringify"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA8C,OAA9C,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB,C,CACA;;;AAGA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC5B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMc,GAAG,GAAGhB,QAAQ,CAACiB,SAAT,GAAqBC,UAArB,CAAgC,QAAhC,CAAZ;AACA,MAAIC,MAAJ;;AACA,iBAAeC,SAAf,GAA2B;AACxBL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,IAAAA,GAAG,CAACK,UAAJ,CAAgBC,aAAD,IAAmB;AAC/B,YAAMC,KAAK,GAAG,EAAd;AACAD,MAAAA,aAAa,CAACE,OAAd,CAAuBL,MAAD,IAAY;AAC/BI,QAAAA,KAAK,CAACE,IAAN,CAAWN,MAAM,CAACO,IAAP,EAAX;AACF,OAFD;AAGAb,MAAAA,SAAS,CAACU,KAAD,CAAT;AACAR,MAAAA,UAAU,CAAC,KAAD,CAAV,CAN+B,CAO/B;AACF,KARD;AASF;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACbiB,IAAAA,SAAS;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAIN,OAAJ,EAAa;AACV,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACF,GAFD,MAEO;AACJK,IAAAA,MAAM,GAAGP,MAAM,CAACe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,MAAM,CAACkB,MAAlC,CAAD,CAAf;AACF;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ,EA5B4B,CA6B5B;;AAKA,sBAAQ,QAAC,QAAD;AAAA,cAAWc,IAAI,CAACC,SAAL,CAAef,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAAX;AAAA;AAAA;AAAA;AAAA,UAAR;AACF;;GAnCuBR,I;;KAAAA,I","sourcesContent":["//  ================= Get People ==============\r\nimport firebase from 'firebase';\r\nimport { Fragment, useState, useEffect } from 'react';\r\n//  ================= Get People ==============\r\n// ================== Card Imports ============\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n// ================== Card Imports ============\r\n\r\n\r\nexport default function Test() {\r\n   // Has to load whole People collection to get random person... for now...\r\n   const [people, setPeople] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const ref = firebase.firestore().collection(\"People\");\r\n   var person;\r\n   async function getPeople() {\r\n      setLoading(true);\r\n      ref.onSnapshot((querySnapshot) => {\r\n         const items = [];\r\n         querySnapshot.forEach((person) => {\r\n            items.push(person.data());\r\n         });\r\n         setPeople(items);\r\n         setLoading(false);\r\n         // console.log(people);\r\n      });\r\n   }\r\n\r\n   useEffect(() => {\r\n      getPeople();\r\n   }, []);\r\n\r\n   if (loading) {\r\n      return (<h1>Loading...</h1>);\r\n   } else {\r\n      person = people[Math.floor(Math.random() * people.length)];\r\n   }\r\n   console.log(person);\r\n   // Has to load whole People collection to get random person... for now...\r\n\r\n\r\n\r\n\r\n   return (<Fragment>{JSON.stringify(person, null, 4)}</Fragment>);\r\n}"]},"metadata":{},"sourceType":"module"}